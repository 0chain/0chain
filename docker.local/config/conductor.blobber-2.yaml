###
### Blockchain miners Byzantine tests
###

---

# enabled test cases sets
enable:
  - "Blobber"

# sets of test cases
sets:
  - name: "Blobber"
    tests:
      - "All blobber tests"

# test cases
tests:
  - name: "All blobber tests"
    flow:
      - command:
          name: 'build_test_blobbers'
      - set_monitor: "sharder 1"
      - cleanup_bc: {}
      - command:
          name: "cleanup_blobbers"
      - command:
          name: "cleanup_block_worker"
      - start: ['sharder 1', 'miner 1', 'miner 2', 'miner 3']
      - wait_round:
          round: 15 # just wait the BC starts
      - start: ['block worker']
      # wait the block worker starts
      - command:
          name: "sleep_20s"
      - start: ['blobber 1', 'blobber 2']
      - wait_add:
          blobbers: ['blobber 1', 'blobber 2']
          timeout: '5m'
      # setup blobbers and create allocation with minimum write pool lock
      - command:
          name: 'init_pour_allocation'
          timeout: '35m'
      # upload random file to spend tokens in write pool
      # <manual setup first>
      - command:
          name: "sleep_1m"

# Client does not have sufficient coins in the write pool.
# Owner does not have sufficient coins in the read pool.

# Client sends files, but not the metadata, or vice versa.
# Client fails to send a write marker, or sends an invalid write marker.
# Read marker invalid/missing.

# Client sends unordered read/write/delete markers.

#Prove that simultaneous CRUDS operations work as part of conductor test even
#  with parity blobbers down. Upload, update, download by authtoken, download by
#  allocation, delete, rename, repair.

# Same time (rename -> update).

# Same time, temorary files (dm -> wm).

# Blobber submits an invalid proof to the validators.

...
