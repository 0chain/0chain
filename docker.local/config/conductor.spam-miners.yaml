###
### Blockchain miners Byzantine tests
###

---
# enabled test cases sets
enable:
  - "VRF"

# sets of test cases
sets:
  - name: "VRF"
    tests:
      - "Spam VRFS to everyone"

#
# test cases
#	Flow of this test case:
#		Attack VRF and ``GetBlockToExtend()``. If adversarial can force network to create VRF,
#    it will force generators to propose. To propose, they will need ``NotarizedBlock`` from previous rounds,
#    if they have none, they should query miners. Miners won’t have any and won’t answer.
#    (Peter hardcoded check for HNB==nil -> return, seems like it can prevent proposing at all,
#    since it is called in computeRoundRandomSeed). Note: it takes at least 2δ + Δ to transfer to new round via
#    (VRF->RRS->Propose->Notarization)
# 		(T0) Replica_0(Adv): send VRF_Share0_0 #normal send
# 		(T0) Replica_0(Adv): send VRF_Share1_0
# 		(T0 + δ) Replica_i: send VRF_Share1_i
# 		(T0 + 2δ) Replica_i: create RRS_1
# 		(T0 + 2δ) Leader_j: Propose Block0_j, query HNB_0
# 		(T0 + 2δ) Replica_0(Adv): send VRF_Share2_0
# 		(T0 + 3δ) Replica_i: send VRF_Share2_i
# 		(T0 + 4δ) Replica_i: create RRS_2
# 		(T0 + 4δ) Leader_j: Propose Block2_j, query HNB_1
#
tests:
  # VRF
  - name: "Spam VRFS to everyone"
    flow:
      - set_monitor: "sharder-1"
      - cleanup_bc: {}
      - start: ["sharder-1"]
      - start: ["miner-1", "miner-2", "miner-3", "miner-4"]
      - round_has_finalized:
          spammers:
            - node_type: 1 # replica node type
              type_rank: 0
      - wait_round:
          round: 10
          allow_beyond: true
      - make_test_case_check:
          wait_time: 1m
