package tokenpool

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *ZcnLockingPool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ZcnPool"
	o = append(o, 0x82, 0xa7, 0x5a, 0x63, 0x6e, 0x50, 0x6f, 0x6f, 0x6c)
	o, err = z.ZcnPool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ZcnPool")
		return
	}
	// string "TokenLockInterface"
	o = append(o, 0xb2, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65)
	o, err = z.TokenLockInterface.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TokenLockInterface")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ZcnLockingPool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ZcnPool":
			bts, err = z.ZcnPool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZcnPool")
				return
			}
		case "TokenLockInterface":
			bts, err = z.TokenLockInterface.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TokenLockInterface")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ZcnLockingPool) Msgsize() (s int) {
	s = 1 + 8 + z.ZcnPool.Msgsize() + 19 + z.TokenLockInterface.Msgsize()
	return
}
