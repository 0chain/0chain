package client

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Client) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "IDField"
	o = append(o, 0x84, 0xa7, 0x49, 0x44, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o, err = z.IDField.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "IDField")
		return
	}
	// string "VersionField"
	o = append(o, 0xac, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o, err = z.VersionField.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "VersionField")
		return
	}
	// string "CreationDateField"
	o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o, err = z.CreationDateField.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreationDateField")
		return
	}
	// string "PublicKey"
	o = append(o, 0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.PublicKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Client) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IDField":
			bts, err = z.IDField.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "IDField")
				return
			}
		case "VersionField":
			bts, err = z.VersionField.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionField")
				return
			}
		case "CreationDateField":
			bts, err = z.CreationDateField.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreationDateField")
				return
			}
		case "PublicKey":
			z.PublicKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Client) Msgsize() (s int) {
	s = 1 + 8 + z.IDField.Msgsize() + 13 + z.VersionField.Msgsize() + 18 + z.CreationDateField.Msgsize() + 10 + msgp.StringPrefixSize + len(z.PublicKey)
	return
}
