name: CONDUCTOR NODE-RECOVERY-02 TESTS

on:
  schedule:
    # Runs everyday at 02:00 am
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
        runner_label:
          description: 'Runner Label'
          default: 'conductor-test'
          required: true
        chain_branch:
          description: 'Input branch for 0chain repo'
          default: ''
          required: false
        blobber_branch:
          description: 'Input branch for blobber repo'
          default: ''
          required: false
        zboxcli_branch:
          description: 'Input branch for zboxcli repo'
          default: ''
          required: false
        zwalletcli_branch:
          description: 'Input branch for zwalletcli repo'
          default: ''
          required: false
        zbox_branch:
          description: 'Input branch for 0box repo'
          default: ''
          required: false

env:
  ZDNS_URL: http://198.18.0.98:9091

jobs:
  CONDUCTOR_NODE_RECOVERY_02_TESTS:
    name: CONDUCTOR-NODE-RECOVERY-02-TESTS
    runs-on: ${{ github.event.inputs.runner_label }}

    steps:
    - name: Setup PATH
      run: |
        export HOME="/root"
        go env -w GO111MODULE=auto
        go env GOROOT
        go env GOPATH
        echo "HOME=$HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$(go env GOROOT)/bin:$(go env GOPATH)/bin" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib" >> $GITHUB_ENV
    - name: Cleanup before restarting conductor tests.
      run: |
        [ "$(docker ps -a -q)" ] && docker rm -f $(docker ps -a -q) || true
        rm -rf *
        rm -rf /mnt/hdd/*
        rm -rf /mnt/ssd/*

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Git clone 0chain
      run: |
        git clone https://github.com/0chain/0chain.git
        cd 0chain
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        CHAIN_BRANCH="${{ inputs.chain_branch }}"
        if [[ -z $CHAIN_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            CHAIN_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=CHAIN_BRANCH::${CHAIN_BRANCH}
        fi
        echo "Branch name is ${CHAIN_BRANCH}"
        git checkout ${CHAIN_BRANCH}

    - name: Docker Init Setup.
      run: |
        export HOME="/root"
        cd 0chain
        make build-mocks
        bash ./docker.local/bin/init.setup.sh

    - name: Docker Network Setup.
      run: |
        cd 0chain
        bash ./docker.local/bin/setup.network.sh || true

    - name: Building Base Images
      run: |
        cd 0chain
        bash ./docker.local/bin/build.base.sh

    - name: Build Miner Docker Image For Integration Test.
      run: |
        cd 0chain
        bash ./docker.local/bin/build.miners-integration-tests.sh

    - name: Build Sharder Docker Image For Integration Test.
      run: |
        cd 0chain
        bash ./docker.local/bin/build.sharders-integration-tests.sh

    - name: Update max faucet limit
      run: |
        cd 0chain
        bash -c 'sed -i "s/max_pour_amount: [0-9]*/max_pour_amount: 1000/g" docker.local/config/sc.yaml'
        bash -c 'grep max_pour_amount ./docker.local/config/sc.yaml'

    - name: View Change Rounds
      run: |
        awk 'NR >= 30 && NR <= 34' ./0chain/docker.local/config/sc.yaml
        awk 'NR >= 9 && NR <= 14' ./0chain/docker.local/config/0chain.yaml

    - name: Git clone blobber
      run: |
        git clone https://github.com/0chain/blobber.git
        cd blobber
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        BLOBBER_BRANCH="${{ inputs.blobber_branch }}"
        if [[ -z $BLOBBER_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            BLOBBER_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
        fi
        echo "BRANCH_OUT=$BLOBBER_BRANCH" >>$GITHUB_OUTPUT
        echo "Branch name is ${BLOBBER_BRANCH}"
        git checkout ${BLOBBER_BRANCH}

    - name: Git clone zboxcli
      run: |
        export HOME="/root"
        git clone https://github.com/0chain/zboxcli.git
        cd zboxcli
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        ZBOXCLI_BRANCH="${{ inputs.zboxcli_branch }}"
        if [[ -z $ZBOXCLI_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            ZBOXCLI_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=ZBOXCLI_BRANCH::${ZBOXCLI_BRANCH}
        fi
        echo "Branch name is ${ZBOXCLI_BRANCH}"
        git checkout ${ZBOXCLI_BRANCH}

    - name: Git clone zwalletcli
      run: |
        export HOME="/root"
        git clone https://github.com/0chain/zwalletcli.git
        cd zwalletcli
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        ZWALLETCLI_BRANCH="${{ inputs.zwalletcli_branch }}"
        if [[ -z $ZWALLETCLI_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            ZWALLETCLI_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=ZWALLETCLI_BRANCH::${ZWALLETCLI_BRANCH}
        fi
        echo "Branch name is ${ZWALLETCLI_BRANCH}"
        git checkout ${ZWALLETCLI_BRANCH}

    - name: Git clone 0dns
      run: |
        git clone https://github.com/0chain/0dns.git

    - name: Git clone 0box
      run: |
        export HOME="/root"
        git clone https://${{ secrets.GIT_USER }}:${{ secrets.GIT_PAT }}@github.com/0chain/0box.git
        cd 0box
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        ZBOX_BRANCH="${{ inputs.zbox_branch }}"
        if [[ -z $ZBOX_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            ZBOX_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=ZBOX_BRANCH::${ZBOX_BRANCH}
        fi
        echo "Branch name is ${ZBOX_BRANCH}"
        git checkout ${ZBOX_BRANCH}

    - name: list pwd
      run: |
        ls -lha
        cd 0chain && git status
        cd ../0dns && git status
        pwd

    - name: Install zboxcli
      run: |
        export HOME="/root"
        cd zboxcli && make install

    - name: Install zwalletcli
      run: |
        export HOME="/root"
        cd zwalletcli && make install

    - name: 0dns Patching
      run: |
        cd 0dns && ../0chain/docker.local/bin/conductor/patch-0dns-tests.sh

    - name: Blobbers Patching
      run: |
        cd blobber && ../0chain/docker.local/bin/conductor/patch-blobber-tests.sh
    - name: 0box Patching
      run: |
        cd 0box
        chmod +x ../0chain/docker.local/bin/conductor/patch-0box-tests.sh
        ../0chain/docker.local/bin/conductor/patch-0box-tests.sh ${{ secrets.ZBOX_ACCESS_KEY }} ${{ secrets.ZBOX_SECRET_KEY }} $ZDNS_URL
  
    - name: Build 0dns
      run: |
        cd 0dns
        ./docker.local/bin/init.sh
        ./docker.local/bin/build.sh

    - name: Build 0box
      run: |
        cd 0box
        ./docker.local/bin/init.sh
        ./docker.local/bin/build.base.sh
        ./docker.local/bin/build.zbox-integration-tests.sh

    - name: Init setup for blobbers
      run: |
        chmod +x blobber/docker.local/bin/blobber.init.setup.sh
        cd blobber && ./docker.local/bin/blobber.init.setup.sh

    - name: Build blobber base
      run: |
        cd blobber
        ./docker.local/bin/build.base.sh

    - name: Build blobber
      run: |
        cd blobber
        chmod +x ./docker.local/bin/build.blobber-integration-tests.sh
        ./docker.local/bin/build.blobber-integration-tests.sh

    - name: Add ZCN config
      run: |
        rm -rf ~/.zcn || true
        mkdir ~/.zcn
        cat <<\EOF > ~/.zcn/config.yaml
        block_worker: http://127.0.0.1:9091
        signature_scheme: bls0chain
        min_submit: 50
        min_confirmation: 50
        confirmation_chain_length: 3
        max_txn_query: 5
        query_sleep_time: 5
        EOF

    - name: List pwd zcn
      run: |
        pwd
        ls -lha ./
        ls -lha ~/.zcn
        cat ~/.zcn/config.yaml

    - name: Starting Node Recovery Tests.
      run: |
        export HOME="/root"
        cd 0chain
        ./docker.local/bin/start.conductor.sh node-recovery-2

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: node-recovery-02-logs
        path: |
          0chain/conductor/logs/
          0chain/docker.local/miner*/log
          0chain/docker.local/sharder*/log
          blobber/docker.local/blobber*/log
          blobber/docker.local/validator*/log

    - name: Added /tmp folder cleanup.
      run: |
        cd /tmp
        rm -rf ./*

  notify_slack_on_failure:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_NODE_RECOVERY_02_TESTS]
    if: always() && (needs.CONDUCTOR_NODE_RECOVERY_02_TESTS.result == 'failure')
    steps:
      - name: "Notify Slack"
        run: |
          payload='{
          "text": "'"<!here> CONDUCTOR_NODE_RECOVERY_02_TESTS FAILED on $(echo ${GITHUB_REF#refs/heads/})!.\n View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}"'",
          "attachments": [
              {
              "text": "CONDUCTOR NODE_RECOVERY_02 TEST FAILED ⚠️",
              "color": "#ff0000"
              }
          ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
          
          # curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_NODE_RECOVERY_02_TESTS FAILED on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}

  notify_slack_on_success:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_NODE_RECOVERY_02_TESTS]
    if: always() && (needs.CONDUCTOR_NODE_RECOVERY_02_TESTS.result == 'success')
    steps:
      - name: "Notify Slack"
        run: |
          payload='{
          "text": "'"<!here> CONDUCTOR_NODE_RECOVERY_02_TESTS PASSING on $(echo ${GITHUB_REF#refs/heads/})!.\n View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}"'",
          "attachments": [
              {
              "text": "CONDUCTOR NODE_RECOVERY_02 TEST PASSED ✅",
              "color": "#22bb33"
              }
          ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
          
          # curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_NODE_RECOVERY_02_TESTS ARE PASSING on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
