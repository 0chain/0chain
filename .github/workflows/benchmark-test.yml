name: Benchmark Tests

concurrency:
  group: "publish-benchmark-${{ github.ref }}"
  cancel-in-progress: true
  
on:
  push:
    branches: [ master, staging ]
  pull_request:
    branches: [ master, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, build]
    steps:
      - name: Actions checkout
        uses: actions/checkout@v2
        
      - name: setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'
        
      - name: Docker Build Image
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl gnupg lsb-release -y
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose || true
          sudo chmod +x /usr/local/bin/docker-compose || true 
          docker-compose --version

      - name: Run Init
        run: |
          sudo apt update && sudo apt install build-essential nghttp2 libnghttp2-dev libssl-dev wget -y
          ./docker.local/bin/init.setup.sh

      - name: Build Base
        run: |
          export HOME="/root"
          sudo ./docker.local/bin/build.base.sh
          
      - name: Docker Build Image
        run: |
          sudo ./docker.local/bin/build.benchmark.sh

      - name: Run tests
        run: |
          cd docker.local/benchmarks
          sudo ../bin/start.benchmarks.sh | tee benchmark_run_output
          grep -R "Results" -A 1000 benchmark_run_output > benchmark_results
          echo "TESTS_RAN=true" >> $GITHUB_ENV   
          if grep -aq "FAILED" benchmark_results; then
            echo "::error::Benchmark tests failed"
            exit 1
          fi
