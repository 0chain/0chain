name: CONDUCTOR TESTS SUITE

on:
  schedule:
    #   # Runs everyday at 02:00 am
      - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Unified branch for repos (0chain, 0box, blobber, authorizer, zwalletcli, zboxcli) - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
jobs:
  standard-miner:
    uses: 0chain/0chain/.github/workflows/conductor-standard-miner-tests.yml@aggregate-ct-test
    with:
      chain_branch: ${{ github.event.inputs.branch }}
    secrets:
      inherit

  standard-sharder:
    uses: 0chain/0chain/.github/workflows/conductor-standard-sharder-tests.yml@aggregate-ct-test
    with:
      chain_branch: ${{ github.event.inputs.branch }}
    secrets:
      inherit
  
  # byzantine:
  #   uses: 0chain/0chain/.github/workflows/conductor-byzantine-tests.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit
  
  # fault-tolerance:
  #   uses: 0chain/0chain/.github/workflows/conductor-fault-tolerance-tests.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit
  
  # blobber-01:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-01.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit

  # blobber-02:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-02.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit

  # blobber-03:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-03.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit

  # blobber-04:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-04.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit

  # blobber-05:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-05.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit

  # blobber-06:
  #   uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-06.yml@aggregate-ct-test
  #   with:
  #     chain_branch: ${{ github.event.inputs.branch }}
  #     blobber_branch: ${{ github.event.inputs.branch }}
  #     zboxcli_branch: ${{ github.event.inputs.branch }}
  #     zwalletcli_branch: ${{ github.event.inputs.branch }}
  #   secrets:
  #     inherit
      
  notify_slack:
    runs-on: [self-hosted, arc-runner]
    needs: [standard-miner, standard-sharder]
    steps:
      - name: "Notify Slack"
        run: |
          BRANCH=$([ -z "${{ github.event.inputs.branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.branch }}")
          MINER_STATUS=$([ "${{ needs.standard-miner.result }}" = "success" ] && echo "PASSED ‚úÖ" || echo "FAILED ‚ö†Ô∏è")
          MINER_COLOR=$([ "${{ needs.standard-miner.result }}" = "success" ] && echo "#22bb33" || echo "#ff0000")
          SHARDER_STATUS=$([ "${{ needs.standard-sharder.result }}" = "success" ] && echo "PASSED ‚úÖ" || echo "FAILED ‚ö†Ô∏è")
          SHAEDER_COLOR=$([ "${{ needs.standard-sharder.result }}" = "success" ] && echo "#22bb33" || echo "#ff0000")

          payload="{
          \"text\": \"<!here> Conductor testing results üìù on $BRANCH branch.\n View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\",
          \"attachments\": [
              {
              \"text\": \"CONDUCTOR STANDARD MINERS TEST $MINER_STATUS\",
              \"color\": \"$MINER_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR STANDARD SHARDERS TEST $SHARDER_STATUS\",
              \"color\": \"$SHAEDER_COLOR\"
              }
          ]
          }"
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
        
  # byzantine:
  # fault-tolerance:
  # blobber-01:
  #   name: Run all conductor tests in parallel
  #   runs-on: conductor-test
  # blobber-02:
  # blobber-03:
  # blobber-04:
  # blobber-05:
  # blobber-06:
  # authorizers-standard:
  # node-recovery-01:
  # node-recovery-02:
  # node-recovery-03: