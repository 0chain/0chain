name: CONDUCTOR TESTS SUITE

on:
  schedule:
      - cron: '0 0 * * *' #Â for sprint
      - cron: '0 1 * * *' # for staging

  push:
    branches:
      - 'sprint-*'
      - 'staging'
  workflow_dispatch:
    inputs:
      zchain-branch:
        description: 'Branch for 0chain repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      blobber-branch:
        description: 'Branch for blobber repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      authorizer-branch:
        description: 'Branch for authorizer repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      zbox-branch:
        description: 'Branch for 0box repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      zboxcli-branch:
        description: 'Branch for zboxcli repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      zwalletcli-branch:
        description: 'Branch for zwalletcli repo - leave blank to use sprint branch'
        required: false
        type: string
        default: ''
      
jobs:
  # Succeeds if the event is scheduled for staging
  scheduled-staging-branches:
    runs-on: [self-hosted, arc-runner]
    if: github.event.schedule == '0 1 * * *'
    steps:
      - name: "Success"
        run: exit 0

  compute-branches:
    needs: scheduled-staging-branches
    if: always()
    runs-on: [self-hosted, arc-runner]
    steps:
      - name: "Compute Branches based on event"
        id: "compute_branches"
        run: |
          ZCHAIN_BRANCH=""
          BLOBBER_BRANCH=""
          AUTHORIZER_BRANCH=""
          ZBOX_BRANCH=""
          ZBOXCLI_BRANCH=""
          ZWALLETCLI_BRANCH=""

          echo "Running from ${{ github.event_name }} event"
          if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
          
            ZCHAIN_BRANCH="${{ github.event.inputs.zchain-branch }}"
            BLOBBER_BRANCH="${{ github.event.inputs.blobber-branch }}"
            AUTHORIZER_BRANCH="${{ github.event.inputs.authorizer-branch }}"
            ZBOX_BRANCH="${{ github.event.inputs.zbox-branch }}"
            ZBOXCLI_BRANCH="${{ github.event.inputs.zboxcli-branch }}"
            ZWALLETCLI_BRANCH="${{ github.event.inputs.zwalletcli-branch }}"
          
          elif [[ "${{ github.event_name }}" = "push" && "${{github.event.ref}}" = "refs/heads/staging" || "${{ needs.scheduled-staging-branches.result}}" = "success" ]]; then
            ZCHAIN_BRANCH="staging"
            BLOBBER_BRANCH="staging"
            AUTHORIZER_BRANCH="staging"
            ZBOX_BRANCH="staging"
            ZBOXCLI_BRANCH="staging"
            ZWALLETCLI_BRANCH="staging"
          fi

          echo "ZCHAIN_BRANCH = $ZCHAIN_BRANCH\n"
          echo "BLOBBER_BRANCH = $BLOBBER_BRANCH\n"
          echo "AUTHORIZER_BRANCH = $AUTHORIZER_BRANCH\n"
          echo "ZBOX_BRANCH = $ZBOX_BRANCH\n"
          echo "ZBOXCLI_BRANCH = $ZBOXCLI_BRANCH\n"
          echo "ZWALLETCLI_BRANCH = $ZWALLETCLI_BRANCH\n"

          echo "zchain_branch=$ZCHAIN_BRANCH" >> "$GITHUB_OUTPUT"
          echo "blobber_branch=$BLOBBER_BRANCH" >> "$GITHUB_OUTPUT"
          echo "authorizer_branch=$AUTHORIZER_BRANCH" >> "$GITHUB_OUTPUT"
          echo "zbox_branch=$ZBOX_BRANCH" >> "$GITHUB_OUTPUT"
          echo "zboxcli_branch=$ZBOXCLI_BRANCH" >> "$GITHUB_OUTPUT"
          echo "zwalletcli_branch=$ZWALLETCLI_BRANCH" >> "$GITHUB_OUTPUT"

    outputs:
      zchain_branch: ${{ steps.compute_branches.outputs.zchain_branch }}
      blobber_branch: ${{ steps.compute_branches.outputs.blobber_branch }}
      authorizer_branch: ${{ steps.compute_branches.outputs.authorizer_branch }}
      zbox_branch: ${{ steps.compute_branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ steps.compute_branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ steps.compute_branches.outputs.zwalletcli_branch }}
  
  standard-miner:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-standard-miner-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit

  standard-sharder:    
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-standard-sharder-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit
  
  zchain-config:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-0chain-config-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
    secrets:
      inherit
  
  byzantine-try-1:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-byzantine-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit

  byzantine-try-2:
    needs: [compute-branches, byzantine-try-1]
    if: always() && needs.compute-branches.result == 'success' && needs.byzantine-try-1.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-byzantine-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit

  byzantine-try-3:
    needs: [compute-branches, byzantine-try-1, byzantine-try-2]
    if: always() && needs.compute-branches.result == 'success' && needs.byzantine-try-1.result == 'failure' && needs.byzantine-try-2.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-byzantine-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit
  
  fault-tolerance:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-fault-tolerance-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit
  
  blobber-01:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-tests-flakiness.yaml@staging
    with:
      test_name: "blobber-1"
      number_of_times: 5
      continue_on_error: true
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-02-try-1:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-02.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-02-try-2:
    needs: [compute-branches, blobber-02-try-1]
    if: always() && needs.compute-branches.result == 'success' && needs.blobber-02-try-1.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-02.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-02-try-3:
    needs: [compute-branches, blobber-02-try-1, blobber-02-try-2]
    if: always() && needs.compute-branches.result == 'success' && needs.blobber-02-try-1.result == 'failure' && needs.blobber-02-try-2.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-blobber-tests-02.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-03:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-tests-flakiness.yaml@staging
    with:
      test_name: "blobber-3"
      number_of_times: 5
      continue_on_error: true
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-04:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-tests-flakiness.yaml@staging
    with:
      test_name: "blobber-4"
      number_of_times: 5
      continue_on_error: true
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-05:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-tests-flakiness.yaml@staging
    with:
      test_name: "blobber-5"
      number_of_times: 5
      continue_on_error: true
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit

  blobber-06:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-tests-flakiness.yaml@staging
    with:
      test_name: "blobber-6"
      number_of_times: 5
      continue_on_error: true
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
  
  authorizers-standard:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-authorizer-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
    secrets:
      inherit
  
  node-recovery-01:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-node-recovery-01-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
    secrets:
      inherit

  node-recovery-02-try-1:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-node-recovery-02-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
    secrets:
      inherit

  node-recovery-02-try-2:
    needs: [compute-branches, node-recovery-02-try-1]
    if: always() && needs.compute-branches.result == 'success' && needs.node-recovery-02-try-1.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-node-recovery-02-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
    secrets:
      inherit

  node-recovery-02-try-3:
    needs: [compute-branches, node-recovery-02-try-1, node-recovery-02-try-2]
    if: always() && needs.compute-branches.result == 'success' && needs.node-recovery-02-try-1.result == 'failure' && needs.node-recovery-02-try-2.result == 'failure'
    uses: 0chain/0chain/.github/workflows/conductor-node-recovery-02-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      blobber_branch: ${{ needs.compute-branches.outputs.blobber_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
    secrets:
      inherit

  node-recovery-03:
    needs: compute-branches
    if: always() && needs.compute-branches.result == 'success'
    uses: 0chain/0chain/.github/workflows/conductor-node-recovery-03-tests.yml@staging
    with:
      chain_branch: ${{ needs.compute-branches.outputs.zchain_branch }}
      auth_branch: ${{ needs.compute-branches.outputs.authorizer_branch }}
      zboxcli_branch: ${{ needs.compute-branches.outputs.zboxcli_branch }}
      zwalletcli_branch: ${{ needs.compute-branches.outputs.zwalletcli_branch }}
      zbox_branch: ${{ needs.compute-branches.outputs.zbox_branch }}
    secrets:
      inherit

  notify_slack:
    runs-on: [self-hosted, arc-runner]
    needs: [standard-miner, standard-sharder, zchain-config, byzantine-try-1, byzantine-try-2, byzantine-try-3, fault-tolerance, blobber-01, blobber-02-try-1, blobber-02-try-2, blobber-02-try-3, blobber-03, blobber-04, blobber-05, blobber-06, authorizers-standard, node-recovery-01, node-recovery-02-try-1, node-recovery-02-try-2, node-recovery-02-try-3, node-recovery-03]
    if: always()
    steps:
      - name: "Notify Slack"
        run: |
          ZCHAIN_BRANCH=$([ -z "${{ github.event.inputs.zchain-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.zchain-branch }}")
          BLOBBER_BRANCH=$([ -z "${{ github.event.inputs.blobber-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.blobber-branch }}")
          AUTHORIZER_BRANCH=$([ -z "${{ github.event.inputs.authorizer-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.authorizer-branch }}")
          ZBOX_BRANCH=$([ -z "${{ github.event.inputs.zbox-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.zbox-branch }}")
          ZBOXCLI_BRANCH=$([ -z "${{ github.event.inputs.zboxcli-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.zboxcli-branch }}")
          ZWALLETCLI_BRANCH=$([ -z "${{ github.event.inputs.zwalletcli-branch }}" ] && echo "sprint" || echo "${{ github.event.inputs.zwalletcli-branch }}")

          PASSED_TEXT="PASSED â"
          FAILED_TEXT="FAILED â ï¸"
          PASSED_COLOR="#22bb33"
          FAILED_COLOR="#ff0000"

          MINER_STATUS=$([ "${{ needs.standard-miner.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          MINER_COLOR=$([ "${{ needs.standard-miner.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          SHARDER_STATUS=$([ "${{ needs.standard-sharder.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          SHAEDER_COLOR=$([ "${{ needs.standard-sharder.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")

          ZCHAIN_CONFIG_STATUS=$([ "${{ needs.zchain-config.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          ZCHAIN_CONFIG_COLOR=$([ "${{ needs.zchain-config.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
        
          # FLAKY
          BYZANTINE_STATUS=$([[ "${{ needs.byzantine-try-1.result }}" = "success" || "${{ needs.byzantine-try-2.result }}" = "success" || "${{ needs.byzantine-try-3.result }}" = "success" ]] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BYZANTINE_COLOR=$([ "$BYZANTINE_STATUS" = "$PASSED_TEXT " ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          BYZANTINE_ATTEMPTS_COUNT=$([ "${{ needs.byzantine-try-1.result }}" = "success" ] && echo "1" || echo "3")
          BYZANTINE_ATTEMPTS_COUNT=$([ "${{ needs.byzantine-try-2.result }}" = "success" ] && echo "2" || echo "$BYZANTINE_ATTEMPTS_COUNT")
          
          FAULT_TOLERANCE_STATUS=$([ "${{ needs.fault-tolerance.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          FAULT_TOLERANCE_COLOR=$([ "${{ needs.fault-tolerance.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          BLOBBER_01_STATUS=$([ "${{ needs.blobber-01.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_01_COLOR=$([ "${{ needs.blobber-01.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          # FLAKY
          BLOBBER_02_STATUS=$([[ "${{ needs.blobber-02-try-1.result }}" = "success" || "${{ needs.blobber-02-try-2.result }}" = "success" || "${{ needs.blobber-02-try-3.result }}" = "success" ]] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_02_COLOR=$([ "$BLOBBER_02_STATUS" = "$PASSED_TEXT" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          BLOBBER_02_ATTEMPTS_COUNT=$([ "${{ needs.blobber-02-try-1.result }}" = "success" ] && echo "1" || echo "3")
          BLOBBER_02_ATTEMPTS_COUNT=$([ "${{ needs.blobber-02-try-2.result }}" = "success" ] && echo "2" || echo "$BLOBBER_02_ATTEMPTS_COUNT")
          
          BLOBBER_03_STATUS=$([ "${{ needs.blobber-03.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_03_COLOR=$([ "${{ needs.blobber-03.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          BLOBBER_04_STATUS=$([ "${{ needs.blobber-04.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_04_COLOR=$([ "${{ needs.blobber-04.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          BLOBBER_05_STATUS=$([ "${{ needs.blobber-05.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_05_COLOR=$([ "${{ needs.blobber-05.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          BLOBBER_06_STATUS=$([ "${{ needs.blobber-06.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          BLOBBER_06_COLOR=$([ "${{ needs.blobber-06.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          AUTHORIZER_STATUS=$([ "${{ needs.authorizers-standard.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          AUTHORIZER_COLOR=$([ "${{ needs.authorizers-standard.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          NODE_RECOVERY_01_STATUS=$([ "${{ needs.node-recovery-01.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          NODE_RECOVERY_01_COLOR=$([ "${{ needs.node-recovery-01.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          
          # FLAKY
          NODE_RECOVERY_02_STATUS=$([[ "${{ needs.node-recovery-02-try-1.result }}" = "success" || "${{ needs.node-recovery-02-try-2.result }}" = "success" || "${{ needs.node-recovery-02-try-3.result }}" = "success" ]] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          NODE_RECOVERY_02_COLOR=$([ "$NODE_RECOVERY_02_STATUS" = "$PASSED_TEXT" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")
          NODE_RECOVERY_02_ATTEMPTS_COUNT=$([ "${{ needs.node-recovery-02-try-1.result }}" = "success" ] && echo "1" || echo "3")
          NODE_RECOVERY_02_ATTEMPTS_COUNT=$([ "${{ needs.node-recovery-02-try-2.result }}" = "success" ] && echo "2" || echo "$NODE_RECOVERY_02_ATTEMPTS_COUNT")
          
          NODE_RECOVERY_03_STATUS=$([ "${{ needs.node-recovery-03.result }}" = "success" ] && echo "$PASSED_TEXT" || echo "$FAILED_TEXT")
          NODE_RECOVERY_03_COLOR=$([ "${{ needs.node-recovery-03.result }}" = "success" ] && echo "$PASSED_COLOR" || echo "$FAILED_COLOR")

          payload="{
            \"text\": \"*ð CONDUCTOR TESTING RESULTS ð*\nð Branches: 0chain ($ZCHAIN_BRANCH) - blobber ($BLOBBER_BRANCH) - authorizer ($AUTHORIZER_BRANCH) - 0box ($ZBOX_BRANCH) - zboxcli ($ZBOXCLI_BRANCH) - zwalletcli ($ZWALLETCLI_BRANCH) \nâï¸ Github run: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\n\",
          \"attachments\": [
              {
              \"text\": \"CONDUCTOR STANDARD MINERS TEST $MINER_STATUS\",
              \"color\": \"$MINER_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR STANDARD SHARDERS TEST $SHARDER_STATUS\",
              \"color\": \"$SHAEDER_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR 0CHAIN CONFIG TEST $ZCHAIN_CONFIG_STATUS\",
              \"color\": \"$ZCHAIN_CONFIG_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BYZANTINE TEST $BYZANTINE_STATUS ($BYZANTINE_ATTEMPTS_COUNT Attempts)\",
              \"color\": \"$BYZANTINE_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR FAULT TOLERANCE TEST $FAULT_TOLERANCE_STATUS\",
              \"color\": \"$FAULT_TOLERANCE_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 01 $BLOBBER_01_STATUS\",
              \"color\": \"$BLOBBER_01_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 02 $BLOBBER_02_STATUS ($BLOBBER_02_ATTEMPTS_COUNT Attempts)\",
              \"color\": \"$BLOBBER_02_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 03 $BLOBBER_03_STATUS\",
              \"color\": \"$BLOBBER_03_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 04 $BLOBBER_04_STATUS\",
              \"color\": \"$BLOBBER_04_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 05 $BLOBBER_05_STATUS\",
              \"color\": \"$BLOBBER_05_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR BLOBBER TEST 06 $BLOBBER_06_STATUS\",
              \"color\": \"$BLOBBER_06_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR AUTHORIZER TEST $AUTHORIZER_STATUS\",
              \"color\": \"$AUTHORIZER_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR NODE RECOVERY TEST 01 $NODE_RECOVERY_01_STATUS\",
              \"color\": \"$NODE_RECOVERY_01_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR NODE RECOVERY TEST 02 $NODE_RECOVERY_02_STATUS ($NODE_RECOVERY_02_ATTEMPTS_COUNT Attempts)\",
              \"color\": \"$NODE_RECOVERY_02_COLOR\"
              },
              {
              \"text\": \"CONDUCTOR NODE RECOVERY TEST 03 $NODE_RECOVERY_03_STATUS\",
              \"color\": \"$NODE_RECOVERY_03_COLOR\"
              }
          ]
          }"
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
