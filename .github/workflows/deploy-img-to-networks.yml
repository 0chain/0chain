name: DEPLOY_TO_SELECTED_N/W

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Input the network name for updating images. '
        required: true

env:
  ZCHAIN_BUILDBASE: zchain_build_base
  ZCHAIN_BUILDRUN: zchain_run_base
  SHARDER_REGISTRY: ${{ secrets.SHARDER_REGISTRY }}
  MINER_REGISTRY: ${{ secrets.MINER_REGISTRY }}
  GITHUB_TOKEN: ${{ secrets.CHAIN_PAT }}

jobs:
  Dockerize_Miner_Sharder:
    name: Docker images for miner/sharder.
    runs-on: load-test
    steps:
    - uses: actions/checkout@v2

    - name: Get Branch & Generate Tags.
      id: get_info
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
        SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
        echo ::set-output name=BRANCH::${BRANCH}
        echo ::set-output name=IMAGE_TAG::${BRANCH}-${SHORT_SHA}

    - name: Build base images for Miner/Sharder.
      run: |
        docker build -f docker.local/build.base/Dockerfile.build_base . -t $ZCHAIN_BUILDBASE
        docker build -f docker.local/build.base/Dockerfile.run_base docker.local/build.base -t $ZCHAIN_BUILDRUN

    - name: Login to Docker Hub.
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build & Push Miner/Sharder Docker Images.
      run: |
        sed 's,%COPY%,COPY --from=miner_build $APP_DIR,g' "$DOCKERFILE_MINER.template" > "$DOCKERFILE_MINER"
        docker build --build-arg GIT_COMMIT=$GITHUB_SHA -t $MINER_REGISTRY:$TAG -f "$DOCKERFILE_MINER" .
        docker tag $MINER_REGISTRY:$TAG $MINER_REGISTRY:latest
        docker tag $MINER_REGISTRY:$TAG $MINER_REGISTRY:staging
        # docker push $MINER_REGISTRY:$TAG
        docker build --build-arg GIT_COMMIT=$GITHUB_SHA -t $SHARDER_REGISTRY:$TAG -f "$DOCKERFILE_SHARDER" .
        docker tag $SHARDER_REGISTRY:$TAG $SHARDER_REGISTRY:latest
        docker tag $SHARDER_REGISTRY:$TAG $SHARDER_REGISTRY:staging
        # docker push $SHARDER_REGISTRY:$TAG
      env:
        TAG: ${{ steps.get_info.outputs.IMAGE_TAG }}
        DOCKERFILE_MINER: "docker.local/build.miner/Dockerfile"
        DOCKERFILE_SHARDER: "docker.local/build.sharder/Dockerfile"

    - name: Push Miner Docker Image With latest Tag.
      run: |
        if [[ "$PUSH_LATEST" == "yes" ]] && [[ "$BRANCH" == "master" ]]; then
          docker push $MINER_REGISTRY:latest
          docker push $SHARDER_REGISTRY:latest
        elif [[ "$PUSH_LATEST" == "yes" ]] && [[ "$BRANCH" == "staging" ]]; then
          docker push $MINER_REGISTRY:staging
          docker push $SHARDER_REGISTRY:staging
        fi
      env:
        PUSH_LATEST: "no"
        BRANCH: ${{ steps.get_info.outputs.BRANCH }}

  Conductor_Test:
    name: Conductor Tests for Miners & Sharders.
    runs-on: load-test

    needs:
    - Dockerize_Miner_Sharder

    steps:
    - uses: actions/checkout@v2

    - name: Generating JSON for Input
      id: get_tag
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/})
        echo ::set-output name=BRANCH::${BRANCH}
        JSON=$(echo {\"view_change\":\"false\"})
        echo ::set-output name=JSON::${JSON}

    - name: Triggering loadtest v1
      uses: convictional/trigger-workflow-and-wait@v1.3.0
      with:
        owner: 0chain
        repo: 0chain
        github_token: ${{ secrets.CHAIN_PAT }}
        workflow_file_name: build-conductor-test.yml
        ref: staging
        inputs: ${{ steps.get_tag.outputs.JSON }}
        propagate_failure: true
        trigger_workflow: true
        wait_workflow: true

  Loadtestv1:
    name: Trigger loadtest v1.
    runs-on: conductor-test

    needs:
    - Conductor_Test

    steps:
    - uses: actions/checkout@v2

    - name: Generating JSON for Input
      id: get_tag
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/})
        echo ::set-output name=BRANCH::${BRANCH}
        BRANCH1=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
        SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
        IMAGE_TAG=${BRANCH1}-${SHORT_SHA}
        echo "Branch ${IMAGE_TAG}."
        JSON=$(echo {\"minerImage\":\"${IMAGE_TAG}\"\,\"sharderImage\":\"${IMAGE_TAG}\"})
        echo ::set-output name=JSON::${JSON}

    - name: Triggering loadtest v1
      uses: convictional/trigger-workflow-and-wait@v1.3.0
      with:
        owner: 0chain
        repo: loadTest
        github_token: ${{ secrets.CHAIN_PAT }}
        workflow_file_name: load-test-v1.yml
        ref: staging
        inputs: ${{ steps.get_tag.outputs.JSON }}
        propagate_failure: true
        trigger_workflow: true
        wait_workflow: true

  # Update_Images:
  #   name: Update images over test.0chain.net.
  #   runs-on: ubuntu-20.04

  #   needs:
  #   - Conductor_Test

  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: azure/setup-helm@v1
  #       with:
  #         version: 'v3.2.2'

  #     - name: Get Image Tags.
  #       id: get_info
  #       run: |
  #         BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
  #         SHORT_SHA=$(echo $GITHUB_SHA | head -c 8)
  #         echo ::set-output name=BRANCH::${BRANCH}
  #         echo ::set-output name=IMAGE_TAG::${BRANCH}-${SHORT_SHA}

  #     - name: Setup helm repo
  #       run: |
  #         helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/0helm/
  #         helm repo update

  #     - name: Setup kubeconfig
  #       run: |
  #         mkdir -p ~/.kube
  #         if [[ "${{ github.event.inputs.network }}" == "test" ]]; then
  #           echo "${{ secrets.TESTKC }}" | base64 -d > ~/.kube/config
  #         elif [[ "${{ github.event.inputs.network }}" == "helm" ]]; then
  #           echo "${{ secrets.HELMKC }}" | base64 -d > ~/.kube/config
  #         fi

  #     - name: Setup chain
  #       run: |
  #         helm upgrade --install --wait --timeout 120s 0chain -n ${{ github.event.inputs.network }} --set sharder.image.tag=${{ steps.get_info.outputs.IMAGE_TAG }} --set miner.image.tag=${{ steps.get_info.outputs.IMAGE_TAG }} 0chain-helm/zchain
  #         rm -rf ~/.kube
