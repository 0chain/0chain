name: "Build & Publish Docker Image"

concurrency:
  group: "publish-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches: [ master, staging, sprint* ]
    tags: [ "v*.*.*" ]
  pull_request:
  workflow_dispatch:
    inputs:
      latest_tag:
        description: 'type yes for building latest / staging tag'
        default: 'no'
        required: true

env:
  ZCHAIN_BUILDBASE: zchain_build_base
  ZCHAIN_BUILDRUN: zchain_run_base
  SHARDER_REGISTRY: ${{ secrets.SHARDER_REGISTRY }}
  MINER_REGISTRY: ${{ secrets.MINER_REGISTRY }}
  ZCHAIN_BUILD_BASE_REGISTRY: ${{ secrets.ZCHAIN_BUILD_BASE_REGISTRY }}
  ZCHAIN_BUILD_RUN_REGISTRY: ${{ secrets.ZCHAIN_BUILD_RUN_REGISTRY }}

jobs:
  miner:
    runs-on: [self-hosted, arc-runner]
    steps:

    - name: Set docker image tag
      id: get_info
      run: |
        if [[ "${{github.ref}}" == refs/pull/* ]]; then
          tag=${GITHUB_REF/\/merge/}
          echo "TAG=$(echo pr-${tag:10})" >> $GITHUB_ENV
        else
          echo "TAG=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g')" >> $GITHUB_ENV
        fi
        echo "BRANCH=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF)" >> $GITHUB_ENV
        echo "SHA=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo $GITHUB_SHA || echo '${{ github.event.pull_request.head.sha }}')" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Setup go 1.20
      uses: actions/setup-go@v2
      with:
        go-version: '1.20' # The Go version to download (if necessary) and use.

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Install Dependencies
      run: |
        sudo apt update -y
        sudo apt -y install build-essential nghttp2 libnghttp2-dev libssl-dev wget
    
    - name: Get changed files using defaults
      id: changed-files
      uses: tj-actions/changed-files@v18.4

    - name: Pull Build Base & Run Base
      run: |
        docker pull $ZCHAIN_BUILD_BASE_REGISTRY:staging
        docker tag $ZCHAIN_BUILD_BASE_REGISTRY:staging $ZCHAIN_BUILDBASE

        docker pull $ZCHAIN_BUILD_RUN_REGISTRY:staging
        docker tag $ZCHAIN_BUILD_RUN_REGISTRY:staging $ZCHAIN_BUILDRUN

    - name: Build base images
      if: (contains(steps.changed-files.outputs.modified_files, 'docker.local/build.base/Dockerfile.build_base') || contains(steps.changed-files.outputs.modified_files, 'docker.local/build.base/Dockerfile.run_base'))
      run: |
        SHORT_SHA=$(echo ${{ env.SHA }} | head -c 8)

        docker build -f docker.local/build.base/Dockerfile.build_base . -t $ZCHAIN_BUILDBASE
        docker tag $ZCHAIN_BUILDBASE $ZCHAIN_BUILD_BASE_REGISTRY:$TAG
        docker tag $ZCHAIN_BUILDBASE $ZCHAIN_BUILD_BASE_REGISTRY:$TAG-$SHORT_SHA
        docker push $ZCHAIN_BUILD_BASE_REGISTRY:$TAG
        docker push $ZCHAIN_BUILD_BASE_REGISTRY:$TAG-$SHORT_SHA

        docker build -f docker.local/build.base/Dockerfile.run_base docker.local/build.base -t $ZCHAIN_BUILDRUN
        docker tag $ZCHAIN_BUILDRUN $ZCHAIN_BUILD_RUN_REGISTRY:$TAG
        docker tag $ZCHAIN_BUILDRUN $ZCHAIN_BUILD_RUN_REGISTRY:$TAG-$SHORT_SHA
        docker push $ZCHAIN_BUILD_RUN_REGISTRY:$TAG
        docker push $ZCHAIN_BUILD_RUN_REGISTRY:$TAG-$SHORT_SHA

    - name: Build & Push
      run: |
        make install-mockery
        make build-mocks

        sed 's,%COPY%,COPY --from=miner_build $APP_DIR,g' "$DOCKERFILE_MINER.template" > "$DOCKERFILE_MINER"
        docker build --build-arg GIT_COMMIT=$GITHUB_SHA -t miner:latest -f "$DOCKERFILE_MINER" .


        docker tag miner:latest ${MINER_REGISTRY}:$TAG
        docker tag miner:latest $MINER_REGISTRY:latest
        docker push ${MINER_REGISTRY}:$TAG

        SHORT_SHA=$(echo ${{ env.SHA }} | head -c 8)
        docker tag miner:latest ${MINER_REGISTRY}:$TAG-$SHORT_SHA
        docker push ${MINER_REGISTRY}:$TAG-$SHORT_SHA

      env:
        DOCKERFILE_MINER: "docker.local/build.miner/Dockerfile"

    - name: Push latest
      if: ${{ github.event.inputs.latest_tag == 'yes' || github.ref == 'refs/heads/master' }}
      run: |
          docker push $MINER_REGISTRY:latest


  sharder:
    runs-on: [self-hosted, arc-runner]
    steps:

    - name: Set docker image tag
      id: get_info
      run: |
        if [[ "${{github.ref}}" == refs/pull/* ]]; then
          tag=${GITHUB_REF/\/merge/}
          echo "TAG=$(echo pr-${tag:10})" >> $GITHUB_ENV
        else
          echo "TAG=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g')" >> $GITHUB_ENV
        fi
        echo "BRANCH=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF)" >> $GITHUB_ENV
        echo "SHA=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo $GITHUB_SHA || echo '${{ github.event.pull_request.head.sha }}')" >> $GITHUB_ENV

    - uses: actions/checkout@v3

    - name: Setup go 1.20
      uses: actions/setup-go@v2
      with:
        go-version: '1.20' # The Go version to download (if necessary) and use.


    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Install Dependencies
      run: |
        sudo apt update -y
        sudo apt -y install build-essential nghttp2 libnghttp2-dev libssl-dev wget
    
    - name: Get changed files using defaults
      id: changed-files
      uses: tj-actions/changed-files@v18.4
    
    - name: Pull Build Base & Run Base
      run: |
        docker pull $ZCHAIN_BUILD_BASE_REGISTRY:staging
        docker tag $ZCHAIN_BUILD_BASE_REGISTRY:staging $ZCHAIN_BUILDBASE

        docker pull $ZCHAIN_BUILD_RUN_REGISTRY:staging
        docker tag $ZCHAIN_BUILD_RUN_REGISTRY:staging $ZCHAIN_BUILDRUN
        
    - name: Build base images
      if: (contains(steps.changed-files.outputs.modified_files, 'docker.local/build.base/Dockerfile.build_base') || contains(steps.changed-files.outputs.modified_files, 'docker.local/build.base/Dockerfile.run_base'))
      run: |
        SHORT_SHA=$(echo ${{ env.SHA }} | head -c 8)
        docker build -f docker.local/build.base/Dockerfile.build_base . -t $ZCHAIN_BUILDBASE
        docker tag $ZCHAIN_BUILDBASE $ZCHAIN_BUILD_BASE_REGISTRY:$TAG
        docker tag $ZCHAIN_BUILDBASE $ZCHAIN_BUILD_BASE_REGISTRY:$TAG-$SHORT_SHA
        docker push $ZCHAIN_BUILD_BASE_REGISTRY:$TAG
        docker push $ZCHAIN_BUILD_BASE_REGISTRY:$TAG-$SHORT_SHA

        docker build -f docker.local/build.base/Dockerfile.run_base docker.local/build.base -t $ZCHAIN_BUILDRUN
        docker tag $ZCHAIN_BUILDRUN $ZCHAIN_BUILD_RUN_REGISTRY:$TAG
        docker tag $ZCHAIN_BUILDRUN $ZCHAIN_BUILD_RUN_REGISTRY:$TAG-$SHORT_SHA
        docker push $ZCHAIN_BUILD_RUN_REGISTRY:$TAG
        docker push $ZCHAIN_BUILD_RUN_REGISTRY:$TAG-$SHORT_SHA

    - name: generate swagger
      run: docker.local/bin/test.swagger.sh

    - name: Build & Push
      run: |
        make install-mockery
        make build-mocks

        docker build --build-arg GIT_COMMIT=$GITHUB_SHA -t sharder:latest -f docker.local/build.sharder/Dockerfile .

        docker tag sharder:latest ${SHARDER_REGISTRY}:$TAG
        docker tag sharder:latest $SHARDER_REGISTRY:latest
        docker push ${SHARDER_REGISTRY}:$TAG

        SHORT_SHA=$(echo ${{ env.SHA }} | head -c 8)
        docker tag sharder:latest ${SHARDER_REGISTRY}:$TAG-$SHORT_SHA
        docker push ${SHARDER_REGISTRY}:$TAG-$SHORT_SHA


    - name: Push latest
      if: ${{ github.event.inputs.latest_tag == 'yes' || github.ref == 'refs/heads/master' }}
      run: |
          docker push $SHARDER_REGISTRY:latest


  system-tests:
    if: github.event_name != 'workflow_dispatch'
    needs: [miner, sharder]
    runs-on: [ tests-suite ]
    steps:
      - name: "Get current PR"
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          github-token: ${{ github.token }}

      - name: "Set PR status as pending"
        uses: 0chain/actions/set-pr-status@master
        if: steps.findPr.outputs.number
        with:
          pr_number: ${{ steps.findPr.outputs.pr }}
          description: "System tests running with default config..."
          state: "pending"
          repository: ${{ github.repository }}
          status_name: "0Chain System Tests"
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          github_token: ${{ github.token }}

      - name: "Setup"
        run: |
          if [[ "${{github.ref}}" == refs/pull/* ]]; then
            tag=${GITHUB_REF/\/merge/}
            echo "TAG=$(echo pr-${tag:10})" >> $GITHUB_ENV
          else
            echo "TAG=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g')" >> $GITHUB_ENV
          fi

          echo "BRANCH=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(([ -z '${{ github.event.pull_request.head.sha }}' ] && echo $GITHUB_SHA || echo '${{ github.event.pull_request.head.sha }}') | head -c 8)" >> $GITHUB_ENV

          echo "NETWORK_URL=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV
          echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

      - name: "Deploy 0Chain"
        uses: 0chain/actions/deploy-0chain@master
        with:
          miner_image: ${{ env.TAG }}-${{ env.SHORT_SHA }}
          sharder_image: ${{ env.TAG }}-${{ env.SHORT_SHA }}
          repo_snapshots_branch: "<CURRENT BRANCH WITH FALLBACK TO CURRENT_SPRINT>"
          svc_account_secret: ${{ secrets.SVC_ACCOUNT_SECRET }}
          kube_config: ${{ secrets[format('DEV{0}KC', env.RUNNER_NUMBER)] }}
          teardown_condition: "TESTS_PASSED"
          SUBGRAPH_API_URL: ${{ secrets.SUBGRAPH_API_URL }}
          TENDERLY_FORK_ID: ${{ secrets.TENDERLY_FORK_ID }}
          graphnode_sc: ${{ secrets.GRAPHNODE_SC }}
          graphnode_network: ${{ secrets.GRAPHNODE_NETWORK }}
          graphnode_ethereum_node_url: https://rpc.tenderly.co/fork/${{ secrets.TENDERLY_FORK_ID }}

      - name: "Run System tests"
        uses: 0chain/actions/run-system-tests@master
        with:
          repo_snapshots_branch: "<CURRENT BRANCH WITH FALLBACK TO CURRENT_SPRINT>"
          network: ${{ env.NETWORK_URL }}
          svc_account_secret: ${{ secrets.SVC_ACCOUNT_SECRET }}
          deploy_report_page: false
          archive_results: true
          run_flaky_tests: false
          run_smoke_tests: ${{ github.ref != 'refs/heads/staging' && github.base_ref != 'staging' && github.ref != 'refs/heads/master' && github.base_ref != 'master' }}
          retry_failures: true
          TENDERLY_FORK_ID: ${{ secrets.TENDERLY_FORK_ID }}
          DEVOPS_CHANNEL_WEBHOOK_URL: ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}

      - name: "Set PR status as ${{ job.status }}"
        if: ${{ (success() || failure()) && steps.findPr.outputs.number }}
        uses: 0chain/actions/set-pr-status@master
        with:
          pr_number: ${{ steps.findPr.outputs.pr }}
          description: "System tests with default config"
          state: ${{ job.status }}
          repository: ${{ github.repository }}
          status_name: "0Chain System Tests"
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          github_token: ${{ github.token }}
