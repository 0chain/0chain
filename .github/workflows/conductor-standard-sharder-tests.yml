name: CONDUCTOR SHARDER STANDARD TESTS

on:
  schedule:
    # Runs everyday at 12:00 am
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  ZCHAIN_BUILDBASE: zchain_build_base
  ZCHAIN_BUILDRUN: zchain_run_base

jobs:
  CONDUCTOR_SHARDER_STANDARD_TESTS:
    name: CONDUCTOR-SHARDER-STANDARD-TESTS
    runs-on: [self-hosted, conductor-test03]

    steps:
    - uses: actions/checkout@v1

    - name: Get Branch
      id: get_branch
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/})
        echo ::set-output name=BRANCH::${BRANCH}
        echo "Branch name is ${BRANCH}"

    - name: "Setup Go"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        [ -f ./https://go.dev/dl/go1.20.3.linux-amd64.tar.gz ] || wget https://go.dev/dl/go1.20.3.linux-amd64.tar.gz
        [ -d /usr/local/go ] &&  rm -rf /usr/local/go
        [ -f /usr/local/bin/go ] &&  rm -rf /usr/local/bin/go
        tar -C /usr/local -xzf ./go1.20.3.linux-amd64.tar.gz
        echo "PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
        export PATH=$PATH:/usr/local/go/bin
        export HOME="/root"
        which go
        go env

    - name: Docker Compose Setup.
      run: |
        sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Docker Init Setup.
      run: |
        export HOME="/root"
        sudo apt update -y
        sudo apt -y install build-essential nghttp2 libnghttp2-dev libssl-dev wget
        make install-mockery
        make build-mocks
        bash ./docker.local/bin/init.setup.sh

    - name: Docker Network Setup.
      run: |
        bash ./docker.local/bin/setup.network.sh || true

    - name: Building Base Images
      run: |
        bash ./docker.local/bin/build.base.sh

    - name: Build Miner Docker Image For Integration Test.
      run: |
        bash ./docker.local/bin/build.miners-integration-tests.sh

    - name: Build Sharder Docker Image For Integration Test.
      run: |
        bash ./docker.local/bin/build.sharders-integration-tests.sh

    - name: View Change Rounds
      run: |
        awk 'NR >= 30 && NR <= 34' ./docker.local/config/sc.yaml
        awk 'NR >= 9 && NR <= 14' ./docker.local/config/0chain.yaml

    - name: Running Standard Tests for Sharders.
      run: |
        export HOME="/root"
        bash ./docker.local/bin/start.conductor.sh sharders

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: standard-sharder-logs
        path: |
          conductor/logs/
          docker.local/miner*
          docker.local/sharder*

    - name: Cleanup
      run: |
        rm -rf *

    - name: Added /tmp folder cleanup.
      run: |
        cd /tmp
        rm -rf ./*

  notify_slack_on_failure:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_SHARDER_STANDARD_TESTS]
    if: always() && (needs.CONDUCTOR_SHARDER_STANDARD_TESTS.result == 'failure')
    steps:
      - name: "Notify Slack"
        run: |
          payload='{
          "text": "'"<!here> CONDUCTOR_SHARDER_STANDARD_TESTS FAILED on $(echo ${GITHUB_REF#refs/heads/})!.\n View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}"'",
          "attachments": [
              {
              "text": "CONDUCTOR SHARDER_STANDARD TEST FAILED ⚠️",
              "color": "#ff0000"
              }
          ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
          
          # curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_SHARDER_STANDARD_TESTS FAILED on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}

  notify_slack_on_success:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_SHARDER_STANDARD_TESTS]
    if: always() && (needs.CONDUCTOR_SHARDER_STANDARD_TESTS.result == 'success')
    steps:
      - name: "Notify Slack"
        run: |
          payload='{
          "text": "'"<!here> CONDUCTOR_SHARDER_STANDARD_TESTS PASSING on $(echo ${GITHUB_REF#refs/heads/})!.\n View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}"'",
          "attachments": [
              {
              "text": "CONDUCTOR SHARDER_STANDARD TESTS PASSED ✅",
              "color": "#22bb33"
              }
          ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
          
          # curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_SHARDER_STANDARD_TESTS ARE PASSING on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
