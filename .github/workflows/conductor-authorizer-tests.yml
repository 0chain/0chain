name: CONDUCTOR AUTHORIZER TESTS

on:
  # schedule:
  #   - cron: '0 10 * * * '
  workflow_dispatch:

jobs:
  CONDUCTOR_AUTHORIZER_TESTS:
    name: CONDUCTOR-AUTHORIZER-TESTS
    runs-on: [self-hosted, conductor-test03]

    steps:
    - name: Cleanup before restarting conductor tests.
      run: |
        rm -rf *

    - name: "Setup Go"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        [ -f ./https://go.dev/dl/go1.18.10.linux-amd64.tar.gz ] || wget https://go.dev/dl/go1.18.10.linux-amd64.tar.gz
        [ -d /usr/local/go ] &&  rm -rf /usr/local/go
        [ -f /usr/local/bin/go ] &&  rm -rf /usr/local/bin/go
        tar -C /usr/local -xzf ./go1.18.10.linux-amd64.tar.gz

        echo "PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
        export PATH=$PATH:/usr/local/go/bin
        which go
        go env

    - name: Docker Compose Setup.
      run: |
        sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Get Branch
      id: get_branch
      run: |
        BRANCH=$(echo ${GITHUB_REF#refs/heads/})
        echo ::set-output name=BRANCH::${BRANCH}
        echo "Branch name is ${BRANCH}"

    - name: Git clone 0chain
      run: |
        git clone https://github.com/0chain/0chain.git
        cd 0chain && git checkout ${{ steps.get_branch.outputs.BRANCH }}

    - name: Docker Init Setup.
      run: |
        cd 0chain
        make install-mockery
        make build-mocks
        bash ./docker.local/bin/init.setup.sh

    - name: Docker Network Setup.
      run: |
        cd 0chain
        bash ./docker.local/bin/setup.network.sh || true

    - name: Building Base Images
      run: |
        cd 0chain
        bash ./docker.local/bin/build.base.sh

    - name: Build Miner Docker Image For Integration Test.
      run: |
        cd 0chain
        bash ./docker.local/bin/build.miners-integration-tests.sh

    - name: Build Sharder Docker Image For Integration Test.
      run: |
        cd 0chain
        bash ./docker.local/bin/build.sharders-integration-tests.sh

    - name: View Change Rounds
      run: |
        awk 'NR >= 30 && NR <= 34' ./0chain/docker.local/config/sc.yaml
        awk 'NR >= 9 && NR <= 14' ./0chain/docker.local/config/0chain.yaml

    - name: Git clone authorizer
      run: |
        git clone https://service-0chain:${{ secrets.CHAIN_PAT }}@github.com/0chain/token_bridge_authserver.git
        git checkout fix/conductor-tests

    - name: Git clone zboxcli
      run: |
        git clone https://github.com/0chain/zboxcli.git

    - name: Git clone zwalletcli
      run: |
        git clone https://github.com/0chain/zwalletcli.git

    - name: Git clone 0dns
      run: |
        git clone https://github.com/0chain/0dns.git

    - name: list pwd
      run: |
        ls -lha
        cd 0chain && git status
        cd ../0dns && git status
        pwd

    - name: Install zboxcli
      run: |
        cd zboxcli && make install

    - name: Install zwalletcli
      run: |
        cd zwalletcli && make install

    - name: 0dns Patching
      run: |
        cd 0dns && ../0chain/docker.local/bin/conductor/patch-0dns-tests.sh

    - name: Build 0dns
      run: |
        cd 0dns
        ./docker.local/bin/init.sh
        ./docker.local/bin/build.sh

    - name: Init setup for authorizers
      run: |
        cd token_bridge_authserver && ./docker.local/bin/authorizer.init.setup.sh

    - name: Build authorizer
      run: |
        cd token_bridge_authserver
        chmod +x ./docker.local/bin/build.authorizer-integration-tests.sh
        ./docker.local/bin/build.authorizer-integration-tests.sh

    - name: Add ZCN config
      run: |
        rm -rf ~/.zcn || true
        mkdir ~/.zcn
        cat <<\EOF > ~/.zcn/config.yaml
        block_worker: http://127.0.0.1:9091
        signature_scheme: bls0chain
        min_submit: 50
        min_confirmation: 50
        confirmation_chain_length: 3
        max_txn_query: 5
        query_sleep_time: 5
        ethereum_node_url: https://polygon-mumbai.g.alchemy.com/v2/7iEbl9UprffEQSqCmhJh4kZFdEnfM1TO
        bridge:
          bridge_address: 0xf260c644Acfbfd87bdC77Fe32c8d6a56C9eec879
          token_address: 0xC79aD1e07f790d0Cf6AA3D09FeC393A09DC53d64
          authorizers_address: 0xd5867B4a1F8e7BD91276b5C85a4EDC9D33400496
          ethereum_address: 0xD8c9156e782C68EE671C09b6b92de76C97948432
          password: â€œ02289b9"
        EOF

    - name: List pwd zcn
      run: |
        pwd
        ls -lha ./
        ls -lha ~/.zcn
        cat ~/.zcn/config.yaml

    - name: Starting authorizer Tests.
      run: |
        cd 0chain
        ./docker.local/bin/start.conductor.sh authorizer

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: conductor-logs
        path: |
          0chain/conductor/logs/
          0chain/docker.local/
          token_bridge_authserver/docker.local/

  notify_slack_on_failure:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_AUTHORIZER_TESTS]
    if: always() && (needs.CONDUCTOR_AUTHORIZER_TESTS.result == 'failure')
    steps:
      - name: "Notify Slack"
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_AUTHORIZER_TESTS FAILED on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}

  notify_slack_on_success:
    runs-on: [self-hosted, arc-runner]
    needs: [CONDUCTOR_AUTHORIZER_TESTS]
    if: always() && (needs.CONDUCTOR_AUTHORIZER_TESTS.result == 'success')
    steps:
      - name: "Notify Slack"
        run: |
          curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> CONDUCTOR_AUTHORIZER_TESTS ARE PASSING on $(echo ${GITHUB_REF#refs/heads/})!. View the test results on Github: https://github.com/0chain/0chain/actions/runs/${{ github.run_id }}\"}" ${{ secrets.DEVOPS_CHANNEL_WEBHOOK_URL }}
