name: CONDUCTOR AUTHORIZER TESTS

on:
  workflow_dispatch:
    inputs:
      chain_branch:
        description: 'Input branch for 0chain repo'
        default: ''
        required: false
      auth_branch:
        description: 'Input branch for authorizer repo'
        default: ''
        required: false
      zboxcli_branch:
        description: 'Input branch for zboxcli repo'
        default: ''
        required: false
      zwalletcli_branch:
        description: 'Input branch for zwalletcli repo'
        default: ''
        required: false
  workflow_call:
    inputs:
      chain_branch:
        type: string
        description: 'Input branch for 0chain repo'
        default: ''
        required: false
      auth_branch:
        type: string
        description: 'Input branch for authorizer repo'
        default: ''
        required: false
      zboxcli_branch:
        type: string
        description: 'Input branch for zboxcli repo'
        default: ''
        required: false
      zwalletcli_branch:
        type: string
        description: 'Input branch for zwalletcli repo'
        default: ''
        required: false

jobs:
  CONDUCTOR_AUTHORIZER_TESTS:
    name: CONDUCTOR-AUTHORIZER-TESTS
    runs-on: [ self-hosted, conductor-test ]

    outputs:
      branch: ${{ steps.auth_branch.outputs.BRANCH_OUT }}

    steps:
      - name: Setup Environment Variables
        run: |
          export HOME="/root"
          go env -w GO111MODULE=auto
          go env GOROOT
          go env GOPATH
          echo "HOME=$HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$(go env GOROOT)/bin:$(go env GOPATH)/bin" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib" >> $GITHUB_ENV

      - name: Cleanup before restarting conductor tests.
        run: |
          rm -rf *
          [ "$(docker ps -a -q)" ] && docker rm -f $(docker ps -a -q) || true

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Git clone 0chain
        run: |
          git clone https://github.com/0chain/0chain.git
          cd 0chain
          git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
          CHAIN_BRANCH="${{ inputs.chain_branch }}"
          if [[ -z $CHAIN_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            CHAIN_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=CHAIN_BRANCH::${CHAIN_BRANCH}
          fi
          echo "Branch name is ${CHAIN_BRANCH}"
          git checkout ${CHAIN_BRANCH}

      - name: Docker Init Setup.
        run: |
          export HOME="/root"
          cd 0chain
          make build-mocks
          bash ./docker.local/bin/init.setup.sh

      - name: Docker Network Setup.
        run: |
          cd 0chain
          bash ./docker.local/bin/setup.network.sh || true

      - name: Building Base Images
        run: |
          cd 0chain
          bash ./docker.local/bin/build.base.sh

      - name: Build Miner Docker Image For Integration Test.
        run: |
          cd 0chain
          bash ./docker.local/bin/build.miners-integration-tests.sh

      - name: Build Sharder Docker Image For Integration Test.
        run: |
          cd 0chain
          bash ./docker.local/bin/build.sharders-integration-tests.sh

      - name: Update max faucet limit
        run: |
          cd 0chain
          bash -c 'sed -i "s/max_pour_amount: 10/max_pour_amount: 1000/g" docker.local/config/sc.yaml'
          bash -c 'cat docker.local/config/sc.yaml | grep max_pour_amount'

      - name: View Change Rounds
        run: |
          awk 'NR >= 30 && NR <= 34' ./0chain/docker.local/config/sc.yaml
          awk 'NR >= 9 && NR <= 14' ./0chain/docker.local/config/0chain.yaml

      - name: Git clone authorizer
        id: auth_branch
        run: |
          git clone https://${{ secrets.SVC_ACCOUNT_USER }}:${{ secrets.SVC_ACCOUNT_SECRET }}@github.com/0chain/token_bridge_authserver.git
          cd token_bridge_authserver
          git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
          AUTH_BRANCH="${{ inputs.auth_branch }}"
          if [[ -z $AUTH_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            AUTH_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo "BRANCH_OUT=$AUTH_BRANCH" >>$GITHUB_OUTPUT
          fi
          echo "Branch name is ${AUTH_BRANCH}"
          git checkout ${AUTH_BRANCH}

      - name: Git clone zboxcli
        run: |
          git clone https://github.com/0chain/zboxcli.git
          cd zboxcli
          git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
          ZBOXCLI_BRANCH="${{ inputs.zboxcli_branch }}"
          if [[ -z $ZBOXCLI_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            ZBOXCLI_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=ZBOXCLI_BRANCH::${ZBOXCLI_BRANCH}
          fi
          echo "Branch name is ${ZBOXCLI_BRANCH}"
          git checkout ${ZBOXCLI_BRANCH}

      - name: Git clone zwalletcli
        run: |
          git clone https://github.com/0chain/zwalletcli.git
          cd zwalletcli
          git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
          ZWALLETCLI_BRANCH="${{ inputs.zwalletcli_branch }}"
          if [[ -z $ZWALLETCLI_BRANCH ]]; then
            echo "Checking for latest sprint branch"
            git branch --sort=-committerdate | grep "sprint-*" | head -1
            ZWALLETCLI_BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
            echo ::set-output name=ZWALLETCLI_BRANCH::${ZWALLETCLI_BRANCH}
          fi
          echo "Branch name is ${ZWALLETCLI_BRANCH}"
          git checkout ${ZWALLETCLI_BRANCH}

      - name: Git clone 0dns
        run: |
          git clone https://github.com/0chain/0dns.git

      - name: list pwd
        run: |
          ls -lha
          cd 0chain && git status
          cd ../0dns && git status
          pwd

      - name: Install zboxcli
        run: |
          export HOME="/root"
          cd zboxcli && make install

      - name: Install zwalletcli
        run: |
          export HOME="/root"
          cd zwalletcli && make install

      - name: 0dns Patching
        run: |
          cd 0dns && ../0chain/docker.local/bin/conductor/patch-0dns-tests.sh

      - name: Build 0dns
        run: |
          cd 0dns
          ./docker.local/bin/init.sh
          ./docker.local/bin/build.sh

      - name: Init setup for authorizers
        run: |
          cd token_bridge_authserver && ./docker.local/bin/authorizer.init.setup.sh

      - name: Build authorizer
        run: |
          cd token_bridge_authserver
          chmod +x ./docker.local/bin/build.authorizer-integration-tests.sh
          ./docker.local/bin/build.authorizer-integration-tests.sh

      - name: Changing Authorizer Network
        run: |
          cd token_bridge_authserver
          sed -i 's/^block_worker:\ .*/block_worker:\ http:\/\/198\.18\.0\.98\:9091/' config/config.yaml

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2.1.0
        with:
          version: '1.7'
          force: 'false'

      - name: "Create Tenderly virtual testnet"
        run: |
          echo "TENDERLY_CREATION_INFO=$(curl -X POST \
          -H "x-access-key: ${{ secrets.TENDERLY_SECRET }}" \
          -H "Content-Type: application/json" \
          -d '{"slug":"mainnet-authorizer-ct-${{ env.RUNNER_NUMBER }}-${{ github.run_id }}","displayName":"mainnet-authorizer-ct-${{ env.RUNNER_NUMBER }}-${{ github.run_id }}","description":"","visibility":"TEAM","tags":{"purpose":"development"},"networkConfig":{"networkId":"1","blockNumber":"18512782","chainConfig":{"chainId":"1"},"baseFeePerGas":"1"},"explorerConfig":{"enabled":false,"verificationVisibility":"bytecode"},"syncState":false}' \
          https://api.tenderly.co/api/v1/account/zus_network/project/project/testnet/container)" >> $GITHUB_ENV

      - name: "Parse Tenderly virtual testnet creation transaction result"
        run: |
          echo "TENDERLY_VIRTUAL_TESTNET_ID=$(echo '${{ env.TENDERLY_CREATION_INFO }}' | jq -r '.container.id')" >> $GITHUB_ENV
          echo "TENDERLY_VIRTUAL_TESTNET_RPC_ID=$(echo '${{ env.TENDERLY_CREATION_INFO }}' | jq -r '.container.connectivityConfig.endpoints[0].id')" >> $GITHUB_ENV

      - name: Initialize Ethereum wallet balance
        run: |
          curl -X POST \
              -H "x-access-key: ${{ secrets.TENDERLY_SECRET }}" \
              -H "Content-Type: application/json" \
              -d '{
                "method": "tenderly_addBalance",
                "params": [
                    [
                        "0x8E25cfd9bd6c0ca67a5522cd920b3c66D39d6E97"
                    ],
                    "0x21e19e0c9bab2400000"
                ],
                "id": 42,
                "jsonrpc": "2.0"
            }' \
              https://virtual.mainnet.rpc.tenderly.co/${{ env.TENDERLY_VIRTUAL_TESTNET_RPC_ID }}

      - name: Authorizer patching
        run: |
          cd token_bridge_authserver
          chmod +x ../0chain/docker.local/bin/conductor/patch-authorizer-tests.sh
          ../0chain/docker.local/bin/conductor/patch-authorizer-tests.sh https://virtual.mainnet.rpc.tenderly.co/${{ env.TENDERLY_VIRTUAL_TESTNET_RPC_ID }}

      - name: Add ZCN config
        run: |
          rm -rf ~/.zcn || true
          mkdir ~/.zcn
          cat <<\EOF > ~/.zcn/config.yaml
          block_worker: http://127.0.0.1:9091
          signature_scheme: bls0chain
          min_submit: 50
          min_confirmation: 50
          confirmation_chain_length: 3
          max_txn_query: 5
          query_sleep_time: 5
          ethereum_node_url: https://virtual.mainnet.rpc.tenderly.co/${{ env.TENDERLY_VIRTUAL_TESTNET_RPC_ID }}
          bridge:
            bridge_address: 0x7700D773022b19622095118Fadf46f7B9448Be9b
            token_address: 0xb9EF770B6A5e12E45983C5D80545258aA38F3B78
            authorizers_address: 0x481daB4407b9880DE0A68dc62E6aF611c4949E42
            uniswap_address: 0x4c12C2FeEDD86267d17dB64BaB2cFD12cD8611f5
            ethereum_address: 0x8E25cfd9bd6c0ca67a5522cd920b3c66D39d6E97
            password: "12345678"
          EOF

      - name: List pwd zcn
        run: |
          pwd
          ls -lha ./
          ls -lha ~/.zcn
          cat ~/.zcn/config.yaml

      - name: Add Address
        run: |
          cd ~/.zcn
          mkdir wallets
          cd wallets
          cat <<\EOF > UTC--2023-10-26T00-34-42.327566000Z--8e25cfd9bd6c0ca67a5522cd920b3c66d39d6e97
          {"address":"8e25cfd9bd6c0ca67a5522cd920b3c66d39d6e97","crypto":{"cipher":"aes-128-ctr","ciphertext":"3e6a7c7fc1875e9437fb1b19d8195b707d2143f5aa40615b02efce3ef0422619","cipherparams":{"iv":"ab9d87b14b8593112338abc7da502866"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"94cdd599dd1c4a9eb24f837ca0dbd02d30a33b890bd43eca936c0ca25fd2e983"},"mac":"f07cf9a0c324e8449a1f7c17f5d7f6d3a942ec47b1ee73e157dfc3f325cbb9d3"},"id":"db1bba38-3573-4d53-905f-f075458da3d4","version":3}
          EOF

      - name: Cat Address
        run: |
          cat ~/.zcn/wallets/UTC--2023-10-26T00-34-42.327566000Z--8e25cfd9bd6c0ca67a5522cd920b3c66d39d6e97

      - name: Starting authorizer Tests.
        run: |
          export HOME="/root"
          cd 0chain
          ./docker.local/bin/start.conductor.sh authorizer

      - name: "Remove Tenderly virtual testnet"
        if: always()
        run: |
          curl -X DELETE \
            -H "x-access-key: ${{ secrets.TENDERLY_SECRET }}" \
            -H "Content-Type: application/json" \
            https://api.tenderly.co/api/v1/account/zus_network/project/project/testnet/container/${{ env.TENDERLY_VIRTUAL_TESTNET_ID }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: authorizers-logs
          path: |
            0chain/conductor-full-logs

      - name: Added /tmp folder cleanup.
        run: |
          cd /tmp
          rm -rf ./*
