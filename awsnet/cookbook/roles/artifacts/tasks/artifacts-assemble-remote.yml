---
- block:
  - debug:
      msg: "aws={{aws_vars}}"

  - name: Gather EC2 instance metadata
    ec2_metadata_facts:

  - debug:
      msg: "{{ansible_ec2_instance_id}}"

  - debug:
      msg: "{{ansible_ec2_placement_region}}"

  - name: Obtain EC2 tags for this instance
    local_action:
      module: ec2_tag
      aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY')}}"
      security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN')}}"
      region: "{{ ansible_ec2_placement_region }}"
      resource: "{{ ansible_ec2_instance_id }}"
      state: list
    register: ec2_tags

  - debug:
      msg: "{{ec2_tags}}"
      verbosity: 2

  - set_fact:
      agent_role: "{{ec2_tags.tags.role}}"
      agent_name: "{{ec2_tags.tags.Name}}"
      agent_tags: "{{ec2_tags.tags}}"

  - set_fact:
      agent_dirs: "{{artifact.zchain.dirs[agent_role]}}"

#  - set_fact:
#      agent_dir_pair: "{{agent_dir_pair | default({}) | combine( { item.canonical : item.location | default(item.canonical) })}}"
#    loop: "{{agent_dirs}}"

#  - debug:
#      msg: "agent_dirs for {{agent_role}} ==> {{agent_dirs}} => {{agent_dir_pair}}"
#      verbosity: 1

#  - name: "Create subdirs for agents"
#    file:
#      path : "{{agent_dir.location | default(agent_dir.canonical)}}"
#      state: directory
#      owner: ubuntu
#      group: ubuntu
#      mode: 0755
#    loop: "{{agent_dirs}}"
#    loop_control:
#      loop_var: agent_dir
#      label: "create dir for {{agent_role}} => {{agent_dir.location | default(agent_dir.canonical)}}"
#
#  - name: "Create links to the canonical names"
#    file:
#      src: "{{agent_dir.location}}"
#      dest: "{{agent_dir.canonical}}"
#      state: link
#      force: yes
#    loop: "{{agent_dirs}}"
#
#    loop_control:
#      loop_var: agent_dir
#      label: "create link if required for {{agent_role}} => {{agent_dir.canonical}}"
#    when: agent_dir.location is defined

  tags: ['always']

#  - name: "Create the remote directory"

#- name: "Create zchain - directory {{artifact}}"
#  file:
#    path: "{{artifact.zchain.base}}"
#    state: directory
#    owner: ubuntu
#    group: ubuntu
#    mode: 0755
#  tags: 'artifacts-assemble-remote'
#
#- name: "Create artifact subdirs"
#  file:
#    path : "{{artifact.zchain.base}}/{{item}}"
#    state: directory
#    owner: ubuntu
#    group: ubuntu
#    mode: 0755
#  with_items:
#    - "{{ artifact.zchain.dirs }}"
#  tags: 'artifacts-assemble-remote'
#
#- name: "Delete zchain - directory {{artifact}}"
#  file:
#    path: "{{artifact.zchain.base}}"
#    state: absent
#  tags: 'artifacts-teardown-remote'
...