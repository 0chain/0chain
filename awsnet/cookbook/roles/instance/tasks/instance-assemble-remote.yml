---
- become: yes
  block:
  - name: Set hostname to match EC2 Name
    hostname:
      name: "{{agent_name}}.{{network_name}}.{{network_domain}}"

  - name: Create 0chain group
    group:
      name: 0chain
      state: present
      gid: 2000

  - name: Create 0chain user
    user:
      name: 0chain
      state: present
      password: "$6$ABCDEFGH$uZcwXx6bWrm5fUN8640iLhKJi5OZYLNB7uWGxQ6guZvoFAMxPX8ja3t42xgXWb7ep2su48H3YuCQgfoxXSJIn/"
      shell: /usr/bin/zsh
      group: 0chain

  - lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%ubuntu\s'
      line: '%ubuntu ALL=(0chain) NOPASSWD: ALL'

  - name: Set packages to update
    set_fact:
      package_list:
        - emacs24
        - htop
        - iperf
        - iperf3
        - linux-tools-common
        - linux-tools-4.4.0-1061-aws
        - linux-cloud-tools-4.4.0-1061-aws
        - linux-tools-aws
        - ncdu
        - nethogs
        - nfs-common
        - python-setuptools
        - tree
        - unzip
        - zip
        - zsh


  - name: Install base packages
    apt:
      name: "{{package_list}}"
      state: present

  - name: "Set EBS device and mount point"
    set_fact:
      ebs_mount_point: "{{zchain_volumes.ebs}}"
      ebs_device_name: "{{storage[zchain.blueprint.storage_ebs[agent_role]].ubuntu_disk}}"

  - debug:
      msg: "{{agent_role}}:{{agent_name}} => {{ebs_device_name}}"

  - name: "Install file-system for {{agent_name}} on {{ebs_device_name}}"
    filesystem:
      fstype: ext4
      dev: "{{ebs_device_name}}"
      force: no

  - name: Create EBS mount points...
    file:
      path: "{{ebs_mount_point}}"
      state: directory
      owner: 0chain
      group: 0chain
      mode: 0755

  - name: Mount the EBS block device
    mount:
      path: "{{ebs_mount_point}}"
      src: "{{ebs_device_name}}"
      state: mounted
      fstype: ext4
      boot: yes

- become: yes
  block:
  - name: Get EFS facts for the instance
    local_action:
      module: efs_facts
      aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY')}}"
      security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN')}}"
      region: "{{ ansible_ec2_placement_region }}"
      tags: "{{agent_tags}}"
    register: efs_facts_result

  - set_fact:
      efs: "{{efs_facts_result.ansible_facts.efs[0]}}"

  - debug:
      msg: "efs facts={{efs}}"
      verbosity: 2

  - set_fact:
      efs_mount_point: "{{efs.file_system_id}}.efs.{{ansible_ec2_placement_region}}.amazonaws.com:/"

  - debug:
      msg: "efs_mount_point={{ansible_ec2_instance_identity_document_region}}.{{agent_name}}@{{ansible_ec2_public_ipv4}} => {{efs_mount_point}}"
      verbosity: 0

  - name: "Mount for {{agent_name}} {{efs_mount_point}} at {{zchain_volumes.efs}}"
    mount:
      src: "{{efs_mount_point}}"
      path: "{{zchain_volumes.efs}}"
      fstype: nfs4
      opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=15,retrans=2,noresvport
      state: mounted
    become: yes

  - name: "Change ownership {{zchain_volumes.efs}} to 0chain user"
    file:
      path: "{{zchain_volumes.efs}}"
      owner: 0chain
      group: 0chain
      mode: "u=rwX,g=rX,o=rX"
      recurse: yes
    become: yes
  when: agent_role == "sharder"

- become: yes
  block:
  - set_fact:
      agent_dirs: "{{artifact.zchain.dirs[agent_role]}}"

  - name: "Create subdirs for agents"
    file:
      path : "{{agent_dir.location | default(agent_dir.canonical)}}"
      state: directory
      owner: 0chain
      group: 0chain
      mode: "u=rwX,g=rX,o=rX"
      recurse: yes
    loop: "{{agent_dirs}}"
    loop_control:
      loop_var: agent_dir
      label: "create dir for {{agent_role}} => {{agent_dir.location | default(agent_dir.canonical)}}"

  - name: "Create links to the canonical names"
    file:
      src: "{{agent_dir.location}}"
      dest: "{{agent_dir.canonical}}"
      state: link
      force: yes
      owner: 0chain
      group: 0chain
      mode: "u=rwX,g=rX,o=rX"
    loop: "{{agent_dirs}}"
    loop_control:
      loop_var: agent_dir
      label: "create link if required for {{agent_role}} => {{agent_dir.canonical}}"
    when: agent_dir.location is defined
#  - The following command fails. Hence we use chown with -h flag.
#  - name: "Ensure all canonical files are owned by 0chain"
#    file:
#      path: "{{agent_dir.canonical}}"
#      force: yes
#      owner: 0chain
#      group: 0chain
#      mode: "u=rwX,g=rX,o=rX"
#    loop: "{{agent_dirs}}"
#    loop_control:
#      loop_var: agent_dir
#      label: "assign ownership to 0chain {{agent_role}} => {{agent_dir.canonical}}"

  - name: "Ensure all canonical files are owned by 0chain"
    command: chown -h 0chain:0chain "{{agent_dir.canonical}}"
    args:
      warn: False
    loop: "{{agent_dirs}}"
    loop_control:
      loop_var: agent_dir
      label: "assign ownership to 0chain {{agent_role}} => {{agent_dir.canonical}}"

...
