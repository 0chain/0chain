version: '3'
services:

  cassandra:
    image: cassandra:3.11.4
    networks:
    - default
    ports:
    - "9042:9042"
    volumes:
    - /0chain/sharder/config/cassandra/cassandra.yaml:/etc/cassandra/cassandra.yaml
    - /0chain/sharder/data/cassandra:/var/lib/cassandra

    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5

    privileged: true

  cassandra-init:
    #The service depends upon several cassandra utilities.
    image: cassandra:latest
    volumes:
    - /0chain/sharder/bin:/0chain/bin
    - /0chain/sharder/sql:/0chain/sql

    command: bash /0chain/bin/cassandra-init.sh
    
    links:
    - cassandra:cassandra

    user: ${ZCHAIN_USER}:${ZCHAIN_GROUP}
    privileged: false

  sharder:
    environment:
    - DOCKER=true
    - CASSANDRA_CLUSTER=cassandra
    depends_on:
    - cassandra-init

    links:
    - cassandra-init:cassandra-init
    - cassandra:cassandra

    build:
      context: ${DOCKER_CODEBASE}
      dockerfile: ./docker.aws/build.sharder/Dockerfile

    image: ${IMAGE_NAME}:${IMAGE_TAG}

    pid: "host"

    volumes:
    #CONFIG_VOLUME
    - /0chain/sharder/config:/0chain/config

    #SHARDER_LOG_VOLUME
    - /0chain/sharder/log:/0chain/log

    #ROCKSDB_VOLUME
    - /0chain/sharder/data/rocksdb:/0chain/data/rocksdb
    - /0chain/sharder/data/rocksdb/state:/0chain/data/rocksdb/state

    #Use the blocks volume
    - /0chain/sharder/data/blocks:/0chain/data/blocks

    #Hard and soft are required properties.
    ulimits:
      nofile:
        hard: 32768
        soft: 32768

    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "10"

    ports:
    - "7171:7171"

    restart: ${RESTART_POLICY}

    networks:
      default:

    #Start under user 0chain
    user: ${ZCHAIN_USER}:${ZCHAIN_GROUP}
    command: /0chain/bin/sharder --deployment_mode 0 --keys_file /0chain/config/sharder.txt --nodes_file config/nodes

networks:
  default:
    driver: bridge
