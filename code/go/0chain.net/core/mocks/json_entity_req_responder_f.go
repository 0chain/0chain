// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "0chain.net/core/datastore"
	mock "github.com/stretchr/testify/mock"
)

// JSONEntityReqResponderF is an autogenerated mock type for the JSONEntityReqResponderF type
type JSONEntityReqResponderF struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, entity
func (_m *JSONEntityReqResponderF) Execute(ctx context.Context, entity datastore.Entity) (interface{}, error) {
	ret := _m.Called(ctx, entity)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, datastore.Entity) interface{}); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.Entity) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJSONEntityReqResponderF interface {
	mock.TestingT
	Cleanup(func())
}

// NewJSONEntityReqResponderF creates a new instance of JSONEntityReqResponderF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJSONEntityReqResponderF(t mockConstructorTestingTNewJSONEntityReqResponderF) *JSONEntityReqResponderF {
	mock := &JSONEntityReqResponderF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
