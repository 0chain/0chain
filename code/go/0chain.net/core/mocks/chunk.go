// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	datastore "0chain.net/core/datastore"
	mock "github.com/stretchr/testify/mock"
)

// Chunk is an autogenerated mock type for the Chunk type
type Chunk struct {
	mock.Mock
}

// Add provides a mock function with given fields: entity
func (_m *Chunk) Add(entity datastore.Entity) {
	_m.Called(entity)
}

// Get provides a mock function with given fields: index
func (_m *Chunk) Get(index int) datastore.Entity {
	ret := _m.Called(index)

	var r0 datastore.Entity
	if rf, ok := ret.Get(0).(func(int) datastore.Entity); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Entity)
		}
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Chunk) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Trim provides a mock function with given fields:
func (_m *Chunk) Trim() {
	_m.Called()
}

type mockConstructorTestingTNewChunk interface {
	mock.TestingT
	Cleanup(func())
}

// NewChunk creates a new instance of Chunk. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChunk(t mockConstructorTestingTNewChunk) *Chunk {
	mock := &Chunk{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
