// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "0chain.net/core/datastore"
	mock "github.com/stretchr/testify/mock"
)

// CollectionIteratorHandler is an autogenerated mock type for the CollectionIteratorHandler type
type CollectionIteratorHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, ce
func (_m *CollectionIteratorHandler) Execute(ctx context.Context, ce datastore.CollectionEntity) (bool, error) {
	ret := _m.Called(ctx, ce)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, datastore.CollectionEntity) bool); ok {
		r0 = rf(ctx, ce)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.CollectionEntity) error); ok {
		r1 = rf(ctx, ce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionIteratorHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionIteratorHandler creates a new instance of CollectionIteratorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionIteratorHandler(t mockConstructorTestingTNewCollectionIteratorHandler) *CollectionIteratorHandler {
	mock := &CollectionIteratorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
