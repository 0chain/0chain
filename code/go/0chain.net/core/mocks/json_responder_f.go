// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// JSONResponderF is an autogenerated mock type for the JSONResponderF type
type JSONResponderF struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, r
func (_m *JSONResponderF) Execute(ctx context.Context, r *http.Request) (interface{}, error) {
	ret := _m.Called(ctx, r)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) interface{}); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJSONResponderF interface {
	mock.TestingT
	Cleanup(func())
}

// NewJSONResponderF creates a new instance of JSONResponderF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJSONResponderF(t mockConstructorTestingTNewJSONResponderF) *JSONResponderF {
	mock := &JSONResponderF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
