// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ThresholdSignatureScheme is an autogenerated mock type for the ThresholdSignatureScheme type
type ThresholdSignatureScheme struct {
	mock.Mock
}

// GenerateKeys provides a mock function with given fields:
func (_m *ThresholdSignatureScheme) GenerateKeys() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *ThresholdSignatureScheme) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPublicKey provides a mock function with given fields:
func (_m *ThresholdSignatureScheme) GetPublicKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadKeys provides a mock function with given fields: reader
func (_m *ThresholdSignatureScheme) ReadKeys(reader io.Reader) error {
	ret := _m.Called(reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetID provides a mock function with given fields: id
func (_m *ThresholdSignatureScheme) SetID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPublicKey provides a mock function with given fields: publicKey
func (_m *ThresholdSignatureScheme) SetPublicKey(publicKey string) error {
	ret := _m.Called(publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sign provides a mock function with given fields: hash
func (_m *ThresholdSignatureScheme) Sign(hash interface{}) (string, error) {
	ret := _m.Called(hash)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signature, hash
func (_m *ThresholdSignatureScheme) Verify(signature string, hash string) (bool, error) {
	ret := _m.Called(signature, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(signature, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(signature, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteKeys provides a mock function with given fields: writer
func (_m *ThresholdSignatureScheme) WriteKeys(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewThresholdSignatureScheme interface {
	mock.TestingT
	Cleanup(func())
}

// NewThresholdSignatureScheme creates a new instance of ThresholdSignatureScheme. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewThresholdSignatureScheme(t mockConstructorTestingTNewThresholdSignatureScheme) *ThresholdSignatureScheme {
	mock := &ThresholdSignatureScheme{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
