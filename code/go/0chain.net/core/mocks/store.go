// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "0chain.net/core/datastore"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddToCollection provides a mock function with given fields: ctx, entity
func (_m *Store) AddToCollection(ctx context.Context, entity datastore.CollectionEntity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.CollectionEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, entity
func (_m *Store) Delete(ctx context.Context, entity datastore.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFromCollection provides a mock function with given fields: ctx, entity
func (_m *Store) DeleteFromCollection(ctx context.Context, entity datastore.CollectionEntity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.CollectionEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCollectionSize provides a mock function with given fields: ctx, entityMetadata, collectionName
func (_m *Store) GetCollectionSize(ctx context.Context, entityMetadata datastore.EntityMetadata, collectionName string) int64 {
	ret := _m.Called(ctx, entityMetadata, collectionName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, string) int64); ok {
		r0 = rf(ctx, entityMetadata, collectionName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// InsertIfNE provides a mock function with given fields: ctx, entity
func (_m *Store) InsertIfNE(ctx context.Context, entity datastore.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IterateCollection provides a mock function with given fields: ctx, entityMetadata, collectionName, handler
func (_m *Store) IterateCollection(ctx context.Context, entityMetadata datastore.EntityMetadata, collectionName string, handler datastore.CollectionIteratorHandler) error {
	ret := _m.Called(ctx, entityMetadata, collectionName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, string, datastore.CollectionIteratorHandler) error); ok {
		r0 = rf(ctx, entityMetadata, collectionName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultiAddToCollection provides a mock function with given fields: ctx, entityMetadata, entities
func (_m *Store) MultiAddToCollection(ctx context.Context, entityMetadata datastore.EntityMetadata, entities []datastore.Entity) error {
	ret := _m.Called(ctx, entityMetadata, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, []datastore.Entity) error); ok {
		r0 = rf(ctx, entityMetadata, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultiDelete provides a mock function with given fields: ctx, entityMetadata, entities
func (_m *Store) MultiDelete(ctx context.Context, entityMetadata datastore.EntityMetadata, entities []datastore.Entity) error {
	ret := _m.Called(ctx, entityMetadata, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, []datastore.Entity) error); ok {
		r0 = rf(ctx, entityMetadata, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultiDeleteFromCollection provides a mock function with given fields: ctx, entityMetadata, entities
func (_m *Store) MultiDeleteFromCollection(ctx context.Context, entityMetadata datastore.EntityMetadata, entities []datastore.Entity) error {
	ret := _m.Called(ctx, entityMetadata, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, []datastore.Entity) error); ok {
		r0 = rf(ctx, entityMetadata, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultiRead provides a mock function with given fields: ctx, entityMetadata, keys, entities
func (_m *Store) MultiRead(ctx context.Context, entityMetadata datastore.EntityMetadata, keys []string, entities []datastore.Entity) error {
	ret := _m.Called(ctx, entityMetadata, keys, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, []string, []datastore.Entity) error); ok {
		r0 = rf(ctx, entityMetadata, keys, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MultiWrite provides a mock function with given fields: ctx, entityMetadata, entities
func (_m *Store) MultiWrite(ctx context.Context, entityMetadata datastore.EntityMetadata, entities []datastore.Entity) error {
	ret := _m.Called(ctx, entityMetadata, entities)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.EntityMetadata, []datastore.Entity) error); ok {
		r0 = rf(ctx, entityMetadata, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, key, entity
func (_m *Store) Read(ctx context.Context, key string, entity datastore.Entity) error {
	ret := _m.Called(ctx, key, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, datastore.Entity) error); ok {
		r0 = rf(ctx, key, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: ctx, entity
func (_m *Store) Write(ctx context.Context, entity datastore.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
