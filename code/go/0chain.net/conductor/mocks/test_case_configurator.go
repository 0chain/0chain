// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	conductorcases "0chain.net/conductor/cases"
	mock "github.com/stretchr/testify/mock"
)

// TestCaseConfigurator is an autogenerated mock type for the TestCaseConfigurator type
type TestCaseConfigurator struct {
	mock.Mock
}

// Decode provides a mock function with given fields: val
func (_m *TestCaseConfigurator) Decode(val interface{}) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *TestCaseConfigurator) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TestCase provides a mock function with given fields:
func (_m *TestCaseConfigurator) TestCase() conductorcases.TestCase {
	ret := _m.Called()

	var r0 conductorcases.TestCase
	if rf, ok := ret.Get(0).(func() conductorcases.TestCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(conductorcases.TestCase)
		}
	}

	return r0
}

type mockConstructorTestingTNewTestCaseConfigurator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTestCaseConfigurator creates a new instance of TestCaseConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestCaseConfigurator(t mockConstructorTestingTNewTestCaseConfigurator) *TestCaseConfigurator {
	mock := &TestCaseConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
