// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	block "0chain.net/chaincore/block"

	mock "github.com/stretchr/testify/mock"
)

// Chainer is an autogenerated mock type for the Chainer type
type Chainer struct {
	mock.Mock
}

// ForceFinalizeRound provides a mock function with given fields:
func (_m *Chainer) ForceFinalizeRound() {
	_m.Called()
}

// GetBlock provides a mock function with given fields: ctx, hash
func (_m *Chainer) GetBlock(ctx context.Context, hash string) (*block.Block, error) {
	ret := _m.Called(ctx, hash)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) *block.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentRound provides a mock function with given fields:
func (_m *Chainer) GetCurrentRound() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetLatestFinalizedBlock provides a mock function with given fields:
func (_m *Chainer) GetLatestFinalizedBlock() *block.Block {
	ret := _m.Called()

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func() *block.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// PushToBlockProcessor provides a mock function with given fields: b
func (_m *Chainer) PushToBlockProcessor(b *block.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*block.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChainer interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainer creates a new instance of Chainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainer(t mockConstructorTestingTNewChainer) *Chainer {
	mock := &Chainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
