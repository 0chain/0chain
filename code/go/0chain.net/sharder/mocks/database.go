// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	blockdb "0chain.net/sharder/blockdb"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *Database) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields:
func (_m *Database) Delete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Iterate provides a mock function with given fields: ctx, handler, rp
func (_m *Database) Iterate(ctx context.Context, handler blockdb.DBIteratorHandler, rp blockdb.RecordProvider) error {
	ret := _m.Called(ctx, handler, rp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, blockdb.DBIteratorHandler, blockdb.RecordProvider) error); ok {
		r0 = rf(ctx, handler, rp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *Database) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: key, record
func (_m *Database) Read(key blockdb.Key, record blockdb.Record) error {
	ret := _m.Called(key, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(blockdb.Key, blockdb.Record) error); ok {
		r0 = rf(key, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadAll provides a mock function with given fields: rp
func (_m *Database) ReadAll(rp blockdb.RecordProvider) ([]blockdb.Record, error) {
	ret := _m.Called(rp)

	var r0 []blockdb.Record
	if rf, ok := ret.Get(0).(func(blockdb.RecordProvider) []blockdb.Record); ok {
		r0 = rf(rp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blockdb.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(blockdb.RecordProvider) error); ok {
		r1 = rf(rp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields:
func (_m *Database) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDBHeader provides a mock function with given fields: dbheader
func (_m *Database) SetDBHeader(dbheader blockdb.DBHeader) {
	_m.Called(dbheader)
}

// SetIndex provides a mock function with given fields: index
func (_m *Database) SetIndex(index blockdb.Index) {
	_m.Called(index)
}

// WriteData provides a mock function with given fields: record
func (_m *Database) WriteData(record blockdb.Record) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(blockdb.Record) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
