// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	block "0chain.net/chaincore/block"

	mock "github.com/stretchr/testify/mock"
)

// BlockStore is an autogenerated mock type for the BlockStore type
type BlockStore struct {
	mock.Mock
}

// CloudObjectExists provides a mock function with given fields: hash
func (_m *BlockStore) CloudObjectExists(hash string) bool {
	ret := _m.Called(hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Delete provides a mock function with given fields: hash
func (_m *BlockStore) Delete(hash string) error {
	ret := _m.Called(hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlock provides a mock function with given fields: b
func (_m *BlockStore) DeleteBlock(b *block.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*block.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFromCloud provides a mock function with given fields: hash, round
func (_m *BlockStore) DownloadFromCloud(hash string, round int64) error {
	ret := _m.Called(hash, round)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(hash, round)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: hash, round
func (_m *BlockStore) Read(hash string, round int64) (*block.Block, error) {
	ret := _m.Called(hash, round)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(string, int64) *block.Block); ok {
		r0 = rf(hash, round)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(hash, round)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadWithBlockSummary provides a mock function with given fields: bs
func (_m *BlockStore) ReadWithBlockSummary(bs *block.BlockSummary) (*block.Block, error) {
	ret := _m.Called(bs)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(*block.BlockSummary) *block.Block); ok {
		r0 = rf(bs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*block.BlockSummary) error); ok {
		r1 = rf(bs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadToCloud provides a mock function with given fields: hash, round
func (_m *BlockStore) UploadToCloud(hash string, round int64) error {
	ret := _m.Called(hash, round)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(hash, round)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: b
func (_m *BlockStore) Write(b *block.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*block.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBlockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlockStore creates a new instance of BlockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockStore(t mockConstructorTestingTNewBlockStore) *BlockStore {
	mock := &BlockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
