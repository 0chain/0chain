// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	miner "0chain.net/miner"

	mock "github.com/stretchr/testify/mock"
)

// ProtocolMessageReceiver is an autogenerated mock type for the ProtocolMessageReceiver type
type ProtocolMessageReceiver struct {
	mock.Mock
}

// HandleNotarizationMessage provides a mock function with given fields: ctx, msg
func (_m *ProtocolMessageReceiver) HandleNotarizationMessage(ctx context.Context, msg *miner.BlockMessage) {
	_m.Called(ctx, msg)
}

// HandleNotarizedBlockMessage provides a mock function with given fields: ctx, msg
func (_m *ProtocolMessageReceiver) HandleNotarizedBlockMessage(ctx context.Context, msg *miner.BlockMessage) {
	_m.Called(ctx, msg)
}

// HandleVRFShare provides a mock function with given fields: ctx, msg
func (_m *ProtocolMessageReceiver) HandleVRFShare(ctx context.Context, msg *miner.BlockMessage) {
	_m.Called(ctx, msg)
}

// HandleVerificationTicketMessage provides a mock function with given fields: ctx, msg
func (_m *ProtocolMessageReceiver) HandleVerificationTicketMessage(ctx context.Context, msg *miner.BlockMessage) {
	_m.Called(ctx, msg)
}

// HandleVerifyBlockMessage provides a mock function with given fields: ctx, msg
func (_m *ProtocolMessageReceiver) HandleVerifyBlockMessage(ctx context.Context, msg *miner.BlockMessage) {
	_m.Called(ctx, msg)
}

type mockConstructorTestingTNewProtocolMessageReceiver interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolMessageReceiver creates a new instance of ProtocolMessageReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolMessageReceiver(t mockConstructorTestingTNewProtocolMessageReceiver) *ProtocolMessageReceiver {
	mock := &ProtocolMessageReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
