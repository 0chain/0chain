// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	block "0chain.net/chaincore/block"

	mock "github.com/stretchr/testify/mock"

	round "0chain.net/chaincore/round"
)

// ProtocolMessageSender is an autogenerated mock type for the ProtocolMessageSender type
type ProtocolMessageSender struct {
	mock.Mock
}

// SendBlock provides a mock function with given fields: ctx, b
func (_m *ProtocolMessageSender) SendBlock(ctx context.Context, b *block.Block) {
	_m.Called(ctx, b)
}

// SendFinalizedBlock provides a mock function with given fields: ctx, b
func (_m *ProtocolMessageSender) SendFinalizedBlock(ctx context.Context, b *block.Block) {
	_m.Called(ctx, b)
}

// SendNotarization provides a mock function with given fields: ctx, b
func (_m *ProtocolMessageSender) SendNotarization(ctx context.Context, b *block.Block) {
	_m.Called(ctx, b)
}

// SendNotarizedBlock provides a mock function with given fields: ctx, b
func (_m *ProtocolMessageSender) SendNotarizedBlock(ctx context.Context, b *block.Block) {
	_m.Called(ctx, b)
}

// SendVRFShare provides a mock function with given fields: ctx, r
func (_m *ProtocolMessageSender) SendVRFShare(ctx context.Context, r *round.VRFShare) {
	_m.Called(ctx, r)
}

// SendVerificationTicket provides a mock function with given fields: ctx, b, bvt
func (_m *ProtocolMessageSender) SendVerificationTicket(ctx context.Context, b *block.Block, bvt *block.BlockVerificationTicket) {
	_m.Called(ctx, b, bvt)
}

type mockConstructorTestingTNewProtocolMessageSender interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolMessageSender creates a new instance of ProtocolMessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolMessageSender(t mockConstructorTestingTNewProtocolMessageSender) *ProtocolMessageSender {
	mock := &ProtocolMessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
