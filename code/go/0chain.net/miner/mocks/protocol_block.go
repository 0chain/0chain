// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	block "0chain.net/chaincore/block"

	mock "github.com/stretchr/testify/mock"

	round "0chain.net/chaincore/round"
)

// ProtocolBlock is an autogenerated mock type for the ProtocolBlock type
type ProtocolBlock struct {
	mock.Mock
}

// AddVerificationTicket provides a mock function with given fields: b, bvt
func (_m *ProtocolBlock) AddVerificationTicket(b *block.Block, bvt *block.VerificationTicket) bool {
	ret := _m.Called(b, bvt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*block.Block, *block.VerificationTicket) bool); ok {
		r0 = rf(b, bvt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FinalizeBlock provides a mock function with given fields: ctx, b
func (_m *ProtocolBlock) FinalizeBlock(ctx context.Context, b *block.Block) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateBlock provides a mock function with given fields: ctx, b, waitOver, waitC
func (_m *ProtocolBlock) GenerateBlock(ctx context.Context, b *block.Block, waitOver bool, waitC chan struct{}) error {
	ret := _m.Called(ctx, b, waitOver, waitC)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block, bool, chan struct{}) error); ok {
		r0 = rf(ctx, b, waitOver, waitC)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlockNotarization provides a mock function with given fields: b
func (_m *ProtocolBlock) UpdateBlockNotarization(b *block.Block) bool {
	ret := _m.Called(b)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*block.Block) bool); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ValidateMagicBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProtocolBlock) ValidateMagicBlock(_a0 context.Context, _a1 *round.Round, _a2 *block.Block) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *round.Round, *block.Block) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// VerifyBlock provides a mock function with given fields: ctx, b
func (_m *ProtocolBlock) VerifyBlock(ctx context.Context, b *block.Block) (*block.BlockVerificationTicket, error) {
	ret := _m.Called(ctx, b)

	var r0 *block.BlockVerificationTicket
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block) *block.BlockVerificationTicket); ok {
		r0 = rf(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.BlockVerificationTicket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *block.Block) error); ok {
		r1 = rf(ctx, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyNotarization provides a mock function with given fields: ctx, hash, bvt, _a3
func (_m *ProtocolBlock) VerifyNotarization(ctx context.Context, hash string, bvt []*block.VerificationTicket, _a3 int64) error {
	ret := _m.Called(ctx, hash, bvt, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*block.VerificationTicket, int64) error); ok {
		r0 = rf(ctx, hash, bvt, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyTickets provides a mock function with given fields: ctx, blockHash, vts, _a3
func (_m *ProtocolBlock) VerifyTickets(ctx context.Context, blockHash string, vts []*block.VerificationTicket, _a3 int64) error {
	ret := _m.Called(ctx, blockHash, vts, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*block.VerificationTicket, int64) error); ok {
		r0 = rf(ctx, blockHash, vts, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProtocolBlock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolBlock creates a new instance of ProtocolBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolBlock(t mockConstructorTestingTNewProtocolBlock) *ProtocolBlock {
	mock := &ProtocolBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
