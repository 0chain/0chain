// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	miner "0chain.net/miner"

	mock "github.com/stretchr/testify/mock"

	round "0chain.net/chaincore/round"
)

// ProtocolRoundRandomBeacon is an autogenerated mock type for the ProtocolRoundRandomBeacon type
type ProtocolRoundRandomBeacon struct {
	mock.Mock
}

// AddVRFShare provides a mock function with given fields: ctx, r, vrfs
func (_m *ProtocolRoundRandomBeacon) AddVRFShare(ctx context.Context, r *miner.Round, vrfs *round.VRFShare) bool {
	ret := _m.Called(ctx, r, vrfs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *miner.Round, *round.VRFShare) bool); ok {
		r0 = rf(ctx, r, vrfs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewProtocolRoundRandomBeacon interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolRoundRandomBeacon creates a new instance of ProtocolRoundRandomBeacon. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolRoundRandomBeacon(t mockConstructorTestingTNewProtocolRoundRandomBeacon) *ProtocolRoundRandomBeacon {
	mock := &ProtocolRoundRandomBeacon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
