// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	block "0chain.net/chaincore/block"

	miner "0chain.net/miner"

	mock "github.com/stretchr/testify/mock"

	round "0chain.net/chaincore/round"
)

// ProtocolRound is an autogenerated mock type for the ProtocolRound type
type ProtocolRound struct {
	mock.Mock
}

// AddToRoundVerification provides a mock function with given fields: ctx, r, b
func (_m *ProtocolRound) AddToRoundVerification(ctx context.Context, r *miner.Round, b *block.Block) {
	_m.Called(ctx, r, b)
}

// CancelRoundVerification provides a mock function with given fields: ctx, r
func (_m *ProtocolRound) CancelRoundVerification(ctx context.Context, r *miner.Round) {
	_m.Called(ctx, r)
}

// CollectBlocksForVerification provides a mock function with given fields: ctx, r
func (_m *ProtocolRound) CollectBlocksForVerification(ctx context.Context, r *miner.Round) {
	_m.Called(ctx, r)
}

// FinalizeRound provides a mock function with given fields: _a0
func (_m *ProtocolRound) FinalizeRound(_a0 round.RoundI) {
	_m.Called(_a0)
}

// HandleRoundTimeout provides a mock function with given fields: ctx, _a1
func (_m *ProtocolRound) HandleRoundTimeout(ctx context.Context, _a1 int64) {
	_m.Called(ctx, _a1)
}

// ProcessVerifiedTicket provides a mock function with given fields: ctx, r, b, vt
func (_m *ProtocolRound) ProcessVerifiedTicket(ctx context.Context, r *miner.Round, b *block.Block, vt *block.VerificationTicket) {
	_m.Called(ctx, r, b, vt)
}

// StartNextRound provides a mock function with given fields: ctx, _a1
func (_m *ProtocolRound) StartNextRound(ctx context.Context, _a1 *miner.Round) *miner.Round {
	ret := _m.Called(ctx, _a1)

	var r0 *miner.Round
	if rf, ok := ret.Get(0).(func(context.Context, *miner.Round) *miner.Round); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*miner.Round)
		}
	}

	return r0
}

type mockConstructorTestingTNewProtocolRound interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolRound creates a new instance of ProtocolRound. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolRound(t mockConstructorTestingTNewProtocolRound) *ProtocolRound {
	mock := &ProtocolRound{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
