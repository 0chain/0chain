// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: miner_contract.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNotarizedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round int64  `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetNotarizedBlockRequest) Reset() {
	*x = GetNotarizedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotarizedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotarizedBlockRequest) ProtoMessage() {}

func (x *GetNotarizedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotarizedBlockRequest.ProtoReflect.Descriptor instead.
func (*GetNotarizedBlockRequest) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{0}
}

func (x *GetNotarizedBlockRequest) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GetNotarizedBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetNotarizedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetNotarizedBlockResponse) Reset() {
	*x = GetNotarizedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotarizedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotarizedBlockResponse) ProtoMessage() {}

func (x *GetNotarizedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotarizedBlockResponse.ProtoReflect.Descriptor instead.
func (*GetNotarizedBlockResponse) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{1}
}

func (x *GetNotarizedBlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationTickets            []*VerificationTicket `protobuf:"bytes,1,rep,name=verification_tickets,json=verificationTickets,proto3" json:"verification_tickets,omitempty"`
	Hash                           string                `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature                      string                `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainId                        string                `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainWeight                    float64               `protobuf:"fixed64,5,opt,name=chain_weight,json=chainWeight,proto3" json:"chain_weight,omitempty"`
	RunningTxnCount                int64                 `protobuf:"varint,6,opt,name=running_txn_count,json=runningTxnCount,proto3" json:"running_txn_count,omitempty"`
	MagicBlock                     *MagicBlock           `protobuf:"bytes,7,opt,name=magic_block,json=magicBlock,proto3" json:"magic_block,omitempty"`
	Version                        string                `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	CreationDate                   int64                 `protobuf:"varint,9,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	LatestFinalizedMagicBlockHash  string                `protobuf:"bytes,10,opt,name=latest_finalized_magic_block_hash,json=latestFinalizedMagicBlockHash,proto3" json:"latest_finalized_magic_block_hash,omitempty"`
	LatestFinalizedMagicBlockRound int64                 `protobuf:"varint,11,opt,name=latest_finalized_magic_block_round,json=latestFinalizedMagicBlockRound,proto3" json:"latest_finalized_magic_block_round,omitempty"`
	PrevHash                       string                `protobuf:"bytes,12,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	PrevVerificationTickets        []*VerificationTicket `protobuf:"bytes,13,rep,name=prev_verification_tickets,json=prevVerificationTickets,proto3" json:"prev_verification_tickets,omitempty"`
	MinerId                        string                `protobuf:"bytes,14,opt,name=miner_id,json=minerId,proto3" json:"miner_id,omitempty"`
	Round                          int64                 `protobuf:"varint,15,opt,name=round,proto3" json:"round,omitempty"`
	RoundRandomSeed                int64                 `protobuf:"varint,16,opt,name=round_random_seed,json=roundRandomSeed,proto3" json:"round_random_seed,omitempty"`
	RoundTimeoutCount              int64                 `protobuf:"varint,17,opt,name=round_timeout_count,json=roundTimeoutCount,proto3" json:"round_timeout_count,omitempty"`
	StateHash                      string                `protobuf:"bytes,18,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
	Transactions                   []*Transaction        `protobuf:"bytes,19,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetVerificationTickets() []*VerificationTicket {
	if x != nil {
		return x.VerificationTickets
	}
	return nil
}

func (x *Block) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Block) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Block) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Block) GetChainWeight() float64 {
	if x != nil {
		return x.ChainWeight
	}
	return 0
}

func (x *Block) GetRunningTxnCount() int64 {
	if x != nil {
		return x.RunningTxnCount
	}
	return 0
}

func (x *Block) GetMagicBlock() *MagicBlock {
	if x != nil {
		return x.MagicBlock
	}
	return nil
}

func (x *Block) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Block) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Block) GetLatestFinalizedMagicBlockHash() string {
	if x != nil {
		return x.LatestFinalizedMagicBlockHash
	}
	return ""
}

func (x *Block) GetLatestFinalizedMagicBlockRound() int64 {
	if x != nil {
		return x.LatestFinalizedMagicBlockRound
	}
	return 0
}

func (x *Block) GetPrevHash() string {
	if x != nil {
		return x.PrevHash
	}
	return ""
}

func (x *Block) GetPrevVerificationTickets() []*VerificationTicket {
	if x != nil {
		return x.PrevVerificationTickets
	}
	return nil
}

func (x *Block) GetMinerId() string {
	if x != nil {
		return x.MinerId
	}
	return ""
}

func (x *Block) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Block) GetRoundRandomSeed() int64 {
	if x != nil {
		return x.RoundRandomSeed
	}
	return 0
}

func (x *Block) GetRoundTimeoutCount() int64 {
	if x != nil {
		return x.RoundTimeoutCount
	}
	return 0
}

func (x *Block) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type VerificationTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifierId string `protobuf:"bytes,1,opt,name=verifier_id,json=verifierId,proto3" json:"verifier_id,omitempty"`
	Signature  string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VerificationTicket) Reset() {
	*x = VerificationTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationTicket) ProtoMessage() {}

func (x *VerificationTicket) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationTicket.ProtoReflect.Descriptor instead.
func (*VerificationTicket) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{3}
}

func (x *VerificationTicket) GetVerifierId() string {
	if x != nil {
		return x.VerifierId
	}
	return ""
}

func (x *VerificationTicket) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type MagicBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash             string                              `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash     string                              `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	MagicBlockNumber int64                               `protobuf:"varint,3,opt,name=magic_block_number,json=magicBlockNumber,proto3" json:"magic_block_number,omitempty"`
	StartingRound    int64                               `protobuf:"varint,4,opt,name=starting_round,json=startingRound,proto3" json:"starting_round,omitempty"`
	Miners           *Pool                               `protobuf:"bytes,5,opt,name=miners,proto3" json:"miners,omitempty"`
	Sharders         *Pool                               `protobuf:"bytes,6,opt,name=sharders,proto3" json:"sharders,omitempty"`
	Shares           map[string]*MagicBlock_ShareOrSigns `protobuf:"bytes,7,rep,name=shares,proto3" json:"shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mpks             map[string]*MagicBlock_MPK          `protobuf:"bytes,8,rep,name=mpks,proto3" json:"mpks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	T                int64                               `protobuf:"varint,9,opt,name=t,proto3" json:"t,omitempty"`
	K                int64                               `protobuf:"varint,10,opt,name=k,proto3" json:"k,omitempty"`
	N                int64                               `protobuf:"varint,11,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *MagicBlock) Reset() {
	*x = MagicBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicBlock) ProtoMessage() {}

func (x *MagicBlock) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicBlock.ProtoReflect.Descriptor instead.
func (*MagicBlock) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{4}
}

func (x *MagicBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *MagicBlock) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *MagicBlock) GetMagicBlockNumber() int64 {
	if x != nil {
		return x.MagicBlockNumber
	}
	return 0
}

func (x *MagicBlock) GetStartingRound() int64 {
	if x != nil {
		return x.StartingRound
	}
	return 0
}

func (x *MagicBlock) GetMiners() *Pool {
	if x != nil {
		return x.Miners
	}
	return nil
}

func (x *MagicBlock) GetSharders() *Pool {
	if x != nil {
		return x.Sharders
	}
	return nil
}

func (x *MagicBlock) GetShares() map[string]*MagicBlock_ShareOrSigns {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *MagicBlock) GetMpks() map[string]*MagicBlock_MPK {
	if x != nil {
		return x.Mpks
	}
	return nil
}

func (x *MagicBlock) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *MagicBlock) GetK() int64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *MagicBlock) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int64                 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Nodes map[string]*Pool_Node `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{5}
}

func (x *Pool) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Pool) GetNodes() map[string]*Pool_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash              string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Version           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ClientId          string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ToClientId        string `protobuf:"bytes,4,opt,name=to_client_id,json=toClientId,proto3" json:"to_client_id,omitempty"`
	ChainId           string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TransactionData   string `protobuf:"bytes,6,opt,name=transaction_data,json=transactionData,proto3" json:"transaction_data,omitempty"`
	TransactionValue  int64  `protobuf:"varint,7,opt,name=transaction_value,json=transactionValue,proto3" json:"transaction_value,omitempty"`
	Signature         string `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	CreationDate      int64  `protobuf:"varint,9,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	TransactionFee    int64  `protobuf:"varint,10,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	TransactionType   int64  `protobuf:"varint,11,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TransactionOutput string `protobuf:"bytes,12,opt,name=transaction_output,json=transactionOutput,proto3" json:"transaction_output,omitempty"`
	TxnOutputHash     string `protobuf:"bytes,13,opt,name=txn_output_hash,json=txnOutputHash,proto3" json:"txn_output_hash,omitempty"`
	TransactionStatus int64  `protobuf:"varint,14,opt,name=transaction_status,json=transactionStatus,proto3" json:"transaction_status,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Transaction) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Transaction) GetToClientId() string {
	if x != nil {
		return x.ToClientId
	}
	return ""
}

func (x *Transaction) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Transaction) GetTransactionData() string {
	if x != nil {
		return x.TransactionData
	}
	return ""
}

func (x *Transaction) GetTransactionValue() int64 {
	if x != nil {
		return x.TransactionValue
	}
	return 0
}

func (x *Transaction) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Transaction) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Transaction) GetTransactionFee() int64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *Transaction) GetTransactionType() int64 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *Transaction) GetTransactionOutput() string {
	if x != nil {
		return x.TransactionOutput
	}
	return ""
}

func (x *Transaction) GetTxnOutputHash() string {
	if x != nil {
		return x.TxnOutputHash
	}
	return ""
}

func (x *Transaction) GetTransactionStatus() int64 {
	if x != nil {
		return x.TransactionStatus
	}
	return 0
}

// ExplorerStats
type ExplorerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockFinality      float64 `protobuf:"fixed64,1,opt,name=block_finality,json=blockFinality,proto3" json:"block_finality,omitempty"`
	LastFinalizedRound int64   `protobuf:"varint,2,opt,name=last_finalized_round,json=lastFinalizedRound,proto3" json:"last_finalized_round,omitempty"`
	BlocksFinalized    int64   `protobuf:"varint,3,opt,name=blocks_finalized,json=blocksFinalized,proto3" json:"blocks_finalized,omitempty"`
	StateHealth        int64   `protobuf:"varint,4,opt,name=state_health,json=stateHealth,proto3" json:"state_health,omitempty"`
	CurrentRound       int64   `protobuf:"varint,5,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	RoundTimeout       int64   `protobuf:"varint,6,opt,name=round_timeout,json=roundTimeout,proto3" json:"round_timeout,omitempty"`
	Timeouts           int64   `protobuf:"varint,7,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	AverageBlockSize   int32   `protobuf:"zigzag32,8,opt,name=average_block_size,json=averageBlockSize,proto3" json:"average_block_size,omitempty"`
	// typeof(time.Duration)=int64
	NetworkTime map[string]*durationpb.Duration `protobuf:"bytes,9,rep,name=network_time,json=networkTime,proto3" json:"network_time,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExplorerStats) Reset() {
	*x = ExplorerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplorerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplorerStats) ProtoMessage() {}

func (x *ExplorerStats) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplorerStats.ProtoReflect.Descriptor instead.
func (*ExplorerStats) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{7}
}

func (x *ExplorerStats) GetBlockFinality() float64 {
	if x != nil {
		return x.BlockFinality
	}
	return 0
}

func (x *ExplorerStats) GetLastFinalizedRound() int64 {
	if x != nil {
		return x.LastFinalizedRound
	}
	return 0
}

func (x *ExplorerStats) GetBlocksFinalized() int64 {
	if x != nil {
		return x.BlocksFinalized
	}
	return 0
}

func (x *ExplorerStats) GetStateHealth() int64 {
	if x != nil {
		return x.StateHealth
	}
	return 0
}

func (x *ExplorerStats) GetCurrentRound() int64 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *ExplorerStats) GetRoundTimeout() int64 {
	if x != nil {
		return x.RoundTimeout
	}
	return 0
}

func (x *ExplorerStats) GetTimeouts() int64 {
	if x != nil {
		return x.Timeouts
	}
	return 0
}

func (x *ExplorerStats) GetAverageBlockSize() int32 {
	if x != nil {
		return x.AverageBlockSize
	}
	return 0
}

func (x *ExplorerStats) GetNetworkTime() map[string]*durationpb.Duration {
	if x != nil {
		return x.NetworkTime
	}
	return nil
}

// GetMinerStatsRequest
type GetMinerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Empty *emptypb.Empty `protobuf:"bytes,1,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *GetMinerStatsRequest) Reset() {
	*x = GetMinerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatsRequest) ProtoMessage() {}

func (x *GetMinerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetMinerStatsRequest) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{8}
}

func (x *GetMinerStatsRequest) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

// GetMinerStatsResponse
type GetMinerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	ExplorerStats *ExplorerStats `protobuf:"bytes,1,opt,name=explorer_stats,json=explorerStats,proto3" json:"explorer_stats,omitempty"`
}

func (x *GetMinerStatsResponse) Reset() {
	*x = GetMinerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatsResponse) ProtoMessage() {}

func (x *GetMinerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatsResponse.ProtoReflect.Descriptor instead.
func (*GetMinerStatsResponse) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{9}
}

func (x *GetMinerStatsResponse) GetExplorerStats() *ExplorerStats {
	if x != nil {
		return x.ExplorerStats
	}
	return nil
}

type MagicBlock_ShareOrSigns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShareOrSign map[string]*MagicBlock_ShareOrSigns_DKGKeyShare `protobuf:"bytes,2,rep,name=share_or_sign,json=shareOrSign,proto3" json:"share_or_sign,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MagicBlock_ShareOrSigns) Reset() {
	*x = MagicBlock_ShareOrSigns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicBlock_ShareOrSigns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicBlock_ShareOrSigns) ProtoMessage() {}

func (x *MagicBlock_ShareOrSigns) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicBlock_ShareOrSigns.ProtoReflect.Descriptor instead.
func (*MagicBlock_ShareOrSigns) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{4, 0}
}

func (x *MagicBlock_ShareOrSigns) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MagicBlock_ShareOrSigns) GetShareOrSign() map[string]*MagicBlock_ShareOrSigns_DKGKeyShare {
	if x != nil {
		return x.ShareOrSign
	}
	return nil
}

type MagicBlock_MPK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mpk []string `protobuf:"bytes,2,rep,name=mpk,proto3" json:"mpk,omitempty"`
}

func (x *MagicBlock_MPK) Reset() {
	*x = MagicBlock_MPK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicBlock_MPK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicBlock_MPK) ProtoMessage() {}

func (x *MagicBlock_MPK) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicBlock_MPK.ProtoReflect.Descriptor instead.
func (*MagicBlock_MPK) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{4, 1}
}

func (x *MagicBlock_MPK) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MagicBlock_MPK) GetMpk() []string {
	if x != nil {
		return x.Mpk
	}
	return nil
}

type MagicBlock_ShareOrSigns_DKGKeyShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Share   string `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	Sign    string `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) Reset() {
	*x = MagicBlock_ShareOrSigns_DKGKeyShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicBlock_ShareOrSigns_DKGKeyShare) ProtoMessage() {}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicBlock_ShareOrSigns_DKGKeyShare.ProtoReflect.Descriptor instead.
func (*MagicBlock_ShareOrSigns_DKGKeyShare) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *MagicBlock_ShareOrSigns_DKGKeyShare) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type Pool_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version      string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CreationDate int64           `protobuf:"varint,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	PublicKey    string          `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	N2NHost      string          `protobuf:"bytes,5,opt,name=n2n_host,json=n2nHost,proto3" json:"n2n_host,omitempty"`
	Host         string          `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	Port         int64           `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	GrpcPort     int64           `protobuf:"varint,8,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	Path         string          `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	Type         int64           `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	Description  string          `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	SetIndex     int64           `protobuf:"varint,12,opt,name=set_index,json=setIndex,proto3" json:"set_index,omitempty"`
	Status       int64           `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	InPrevMb     bool            `protobuf:"varint,14,opt,name=in_prev_mb,json=inPrevMb,proto3" json:"in_prev_mb,omitempty"`
	Info         *Pool_Node_Info `protobuf:"bytes,15,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Pool_Node) Reset() {
	*x = Pool_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_Node) ProtoMessage() {}

func (x *Pool_Node) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_Node.ProtoReflect.Descriptor instead.
func (*Pool_Node) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Pool_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pool_Node) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Pool_Node) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Pool_Node) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Pool_Node) GetN2NHost() string {
	if x != nil {
		return x.N2NHost
	}
	return ""
}

func (x *Pool_Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Pool_Node) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Pool_Node) GetGrpcPort() int64 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *Pool_Node) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Pool_Node) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Pool_Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Pool_Node) GetSetIndex() int64 {
	if x != nil {
		return x.SetIndex
	}
	return 0
}

func (x *Pool_Node) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Pool_Node) GetInPrevMb() bool {
	if x != nil {
		return x.InPrevMb
	}
	return false
}

func (x *Pool_Node) GetInfo() *Pool_Node_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Pool_Node_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildTag                string `protobuf:"bytes,1,opt,name=build_tag,json=buildTag,proto3" json:"build_tag,omitempty"`
	StateMissingNodes       int64  `protobuf:"varint,2,opt,name=state_missing_nodes,json=stateMissingNodes,proto3" json:"state_missing_nodes,omitempty"`
	MinersMedianNetworkTime int64  `protobuf:"varint,3,opt,name=miners_median_network_time,json=minersMedianNetworkTime,proto3" json:"miners_median_network_time,omitempty"`
	AvgBlockTxns            int64  `protobuf:"varint,4,opt,name=avg_block_txns,json=avgBlockTxns,proto3" json:"avg_block_txns,omitempty"`
}

func (x *Pool_Node_Info) Reset() {
	*x = Pool_Node_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_contract_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_Node_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_Node_Info) ProtoMessage() {}

func (x *Pool_Node_Info) ProtoReflect() protoreflect.Message {
	mi := &file_miner_contract_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_Node_Info.ProtoReflect.Descriptor instead.
func (*Pool_Node_Info) Descriptor() ([]byte, []int) {
	return file_miner_contract_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *Pool_Node_Info) GetBuildTag() string {
	if x != nil {
		return x.BuildTag
	}
	return ""
}

func (x *Pool_Node_Info) GetStateMissingNodes() int64 {
	if x != nil {
		return x.StateMissingNodes
	}
	return 0
}

func (x *Pool_Node_Info) GetMinersMedianNetworkTime() int64 {
	if x != nil {
		return x.MinersMedianNetworkTime
	}
	return 0
}

func (x *Pool_Node_Info) GetAvgBlockTxns() int64 {
	if x != nil {
		return x.AvgBlockTxns
	}
	return 0
}

var File_miner_contract_proto protoreflect.FileDescriptor

var file_miner_contract_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x3f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0xd2, 0x06, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x14, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x55, 0x0a, 0x19, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x93, 0x07, 0x0a, 0x0a,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x6d, 0x70, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d,
	0x70, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x70, 0x6b, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6e, 0x1a, 0xc2, 0x02, 0x0a, 0x0c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x61,
	0x0a, 0x0b, 0x44, 0x4b, 0x47, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x1a, 0x6a, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x44, 0x4b, 0x47, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x27, 0x0a,
	0x03, 0x4d, 0x50, 0x4b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x70, 0x6b, 0x1a, 0x59, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4e, 0x0a, 0x09, 0x4d, 0x70, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4d, 0x50, 0x4b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xec, 0x05, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xd5, 0x04, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x32, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x32, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x62,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x62,
	0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xb6, 0x01, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x78, 0x6e, 0x73, 0x1a, 0x4a, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8a, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x78, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x03,
	0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x59, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x2e, 0x5a, 0x2c, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x30, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_miner_contract_proto_rawDescOnce sync.Once
	file_miner_contract_proto_rawDescData = file_miner_contract_proto_rawDesc
)

func file_miner_contract_proto_rawDescGZIP() []byte {
	file_miner_contract_proto_rawDescOnce.Do(func() {
		file_miner_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_miner_contract_proto_rawDescData)
	})
	return file_miner_contract_proto_rawDescData
}

var file_miner_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_miner_contract_proto_goTypes = []interface{}{
	(*GetNotarizedBlockRequest)(nil),  // 0: miner.GetNotarizedBlockRequest
	(*GetNotarizedBlockResponse)(nil), // 1: miner.GetNotarizedBlockResponse
	(*Block)(nil),                     // 2: miner.Block
	(*VerificationTicket)(nil),        // 3: miner.VerificationTicket
	(*MagicBlock)(nil),                // 4: miner.MagicBlock
	(*Pool)(nil),                      // 5: miner.Pool
	(*Transaction)(nil),               // 6: miner.Transaction
	(*ExplorerStats)(nil),             // 7: miner.ExplorerStats
	(*GetMinerStatsRequest)(nil),      // 8: miner.GetMinerStatsRequest
	(*GetMinerStatsResponse)(nil),     // 9: miner.GetMinerStatsResponse
	(*MagicBlock_ShareOrSigns)(nil),   // 10: miner.MagicBlock.ShareOrSigns
	(*MagicBlock_MPK)(nil),            // 11: miner.MagicBlock.MPK
	nil,                               // 12: miner.MagicBlock.SharesEntry
	nil,                               // 13: miner.MagicBlock.MpksEntry
	(*MagicBlock_ShareOrSigns_DKGKeyShare)(nil), // 14: miner.MagicBlock.ShareOrSigns.DKGKeyShare
	nil,                         // 15: miner.MagicBlock.ShareOrSigns.ShareOrSignEntry
	(*Pool_Node)(nil),           // 16: miner.Pool.Node
	nil,                         // 17: miner.Pool.NodesEntry
	(*Pool_Node_Info)(nil),      // 18: miner.Pool.Node.Info
	nil,                         // 19: miner.ExplorerStats.NetworkTimeEntry
	(*emptypb.Empty)(nil),       // 20: google.protobuf.Empty
	(*durationpb.Duration)(nil), // 21: google.protobuf.Duration
}
var file_miner_contract_proto_depIdxs = []int32{
	2,  // 0: miner.GetNotarizedBlockResponse.block:type_name -> miner.Block
	3,  // 1: miner.Block.verification_tickets:type_name -> miner.VerificationTicket
	4,  // 2: miner.Block.magic_block:type_name -> miner.MagicBlock
	3,  // 3: miner.Block.prev_verification_tickets:type_name -> miner.VerificationTicket
	6,  // 4: miner.Block.transactions:type_name -> miner.Transaction
	5,  // 5: miner.MagicBlock.miners:type_name -> miner.Pool
	5,  // 6: miner.MagicBlock.sharders:type_name -> miner.Pool
	12, // 7: miner.MagicBlock.shares:type_name -> miner.MagicBlock.SharesEntry
	13, // 8: miner.MagicBlock.mpks:type_name -> miner.MagicBlock.MpksEntry
	17, // 9: miner.Pool.nodes:type_name -> miner.Pool.NodesEntry
	19, // 10: miner.ExplorerStats.network_time:type_name -> miner.ExplorerStats.NetworkTimeEntry
	20, // 11: miner.GetMinerStatsRequest.empty:type_name -> google.protobuf.Empty
	7,  // 12: miner.GetMinerStatsResponse.explorer_stats:type_name -> miner.ExplorerStats
	15, // 13: miner.MagicBlock.ShareOrSigns.share_or_sign:type_name -> miner.MagicBlock.ShareOrSigns.ShareOrSignEntry
	10, // 14: miner.MagicBlock.SharesEntry.value:type_name -> miner.MagicBlock.ShareOrSigns
	11, // 15: miner.MagicBlock.MpksEntry.value:type_name -> miner.MagicBlock.MPK
	14, // 16: miner.MagicBlock.ShareOrSigns.ShareOrSignEntry.value:type_name -> miner.MagicBlock.ShareOrSigns.DKGKeyShare
	18, // 17: miner.Pool.Node.info:type_name -> miner.Pool.Node.Info
	16, // 18: miner.Pool.NodesEntry.value:type_name -> miner.Pool.Node
	21, // 19: miner.ExplorerStats.NetworkTimeEntry.value:type_name -> google.protobuf.Duration
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_miner_contract_proto_init() }
func file_miner_contract_proto_init() {
	if File_miner_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_miner_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotarizedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotarizedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplorerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicBlock_ShareOrSigns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicBlock_MPK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicBlock_ShareOrSigns_DKGKeyShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_contract_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool_Node_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_miner_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_miner_contract_proto_goTypes,
		DependencyIndexes: file_miner_contract_proto_depIdxs,
		MessageInfos:      file_miner_contract_proto_msgTypes,
	}.Build()
	File_miner_contract_proto = out.File
	file_miner_contract_proto_rawDesc = nil
	file_miner_contract_proto_goTypes = nil
	file_miner_contract_proto_depIdxs = nil
}
