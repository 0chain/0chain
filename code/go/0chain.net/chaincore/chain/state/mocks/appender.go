// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	event "0chain.net/smartcontract/dbs/event"
	mock "github.com/stretchr/testify/mock"
)

// Appender is an autogenerated mock type for the Appender type
type Appender struct {
	mock.Mock
}

// Execute provides a mock function with given fields: events, current
func (_m *Appender) Execute(events []event.Event, current event.Event) []event.Event {
	ret := _m.Called(events, current)

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func([]event.Event, event.Event) []event.Event); ok {
		r0 = rf(events, current)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

type mockConstructorTestingTNewAppender interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppender creates a new instance of Appender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppender(t mockConstructorTestingTNewAppender) *Appender {
	mock := &Appender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
