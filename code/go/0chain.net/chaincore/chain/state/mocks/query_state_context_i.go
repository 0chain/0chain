// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	block "0chain.net/chaincore/block"
	event "0chain.net/smartcontract/dbs/event"

	mock "github.com/stretchr/testify/mock"

	util "github.com/0chain/common/core/util"
)

// QueryStateContextI is an autogenerated mock type for the QueryStateContextI type
type QueryStateContextI struct {
	mock.Mock
}

// GetBlock provides a mock function with given fields:
func (_m *QueryStateContextI) GetBlock() *block.Block {
	ret := _m.Called()

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func() *block.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// GetEventDB provides a mock function with given fields:
func (_m *QueryStateContextI) GetEventDB() *event.EventDb {
	ret := _m.Called()

	var r0 *event.EventDb
	if rf, ok := ret.Get(0).(func() *event.EventDb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventDb)
		}
	}

	return r0
}

// GetLatestFinalizedBlock provides a mock function with given fields:
func (_m *QueryStateContextI) GetLatestFinalizedBlock() *block.Block {
	ret := _m.Called()

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func() *block.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// GetTrieNode provides a mock function with given fields: key, v
func (_m *QueryStateContextI) GetTrieNode(key string, v util.MPTSerializable) error {
	ret := _m.Called(key, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, util.MPTSerializable) error); ok {
		r0 = rf(key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTrieNode provides a mock function with given fields: key, v
func (_m *QueryStateContextI) InsertTrieNode(key string, v util.MPTSerializable) (string, error) {
	ret := _m.Called(key, v)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, util.MPTSerializable) string); ok {
		r0 = rf(key, v)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, util.MPTSerializable) error); ok {
		r1 = rf(key, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryStateContextI interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryStateContextI creates a new instance of QueryStateContextI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryStateContextI(t mockConstructorTestingTNewQueryStateContextI) *QueryStateContextI {
	mock := &QueryStateContextI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
