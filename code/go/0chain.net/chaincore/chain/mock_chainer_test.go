// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package chain

import (
	context "context"

	block "0chain.net/chaincore/block"

	mock "github.com/stretchr/testify/mock"

	node "0chain.net/chaincore/node"

	round "0chain.net/chaincore/round"
)

// MockChainer is an autogenerated mock type for the Chainer type
type MockChainer struct {
	mock.Mock
}

// getFinalizedBlockFromSharders provides a mock function with given fields: ctx, ticket
func (_m *MockChainer) getFinalizedBlockFromSharders(ctx context.Context, ticket *LFBTicket) (*block.Block, error) {
	ret := _m.Called(ctx, ticket)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, *LFBTicket) *block.Block); ok {
		r0 = rf(ctx, ticket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LFBTicket) error); ok {
		r1 = rf(ctx, ticket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentRound provides a mock function with given fields:
func (_m *MockChainer) GetCurrentRound() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetLatestFinalizedMagicBlockClone provides a mock function with given fields: ctx
func (_m *MockChainer) GetLatestFinalizedMagicBlockClone(ctx context.Context) *block.Block {
	ret := _m.Called(ctx)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context) *block.Block); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// GetLatestFinalizedMagicBlockRound provides a mock function with given fields: rn
func (_m *MockChainer) GetLatestFinalizedMagicBlockRound(rn int64) *block.Block {
	ret := _m.Called(rn)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(int64) *block.Block); ok {
		r0 = rf(rn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// GetLatestLFBTicket provides a mock function with given fields: ctx
func (_m *MockChainer) GetLatestLFBTicket(ctx context.Context) *LFBTicket {
	ret := _m.Called(ctx)

	var r0 *LFBTicket
	if rf, ok := ret.Get(0).(func(context.Context) *LFBTicket); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LFBTicket)
		}
	}

	return r0
}

// GetMagicBlock provides a mock function with given fields: _a0
func (_m *MockChainer) GetMagicBlock(_a0 int64) *block.MagicBlock {
	ret := _m.Called(_a0)

	var r0 *block.MagicBlock
	if rf, ok := ret.Get(0).(func(int64) *block.MagicBlock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.MagicBlock)
		}
	}

	return r0
}

// GetNotarizedBlockFromMiners provides a mock function with given fields: ctx, hash, _a2, withVerification
func (_m *MockChainer) GetNotarizedBlockFromMiners(ctx context.Context, hash string, _a2 int64, withVerification bool) (*block.Block, error) {
	ret := _m.Called(ctx, hash, _a2, withVerification)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool) *block.Block); ok {
		r0 = rf(ctx, hash, _a2, withVerification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, bool) error); ok {
		r1 = rf(ctx, hash, _a2, withVerification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRound provides a mock function with given fields: roundNumber
func (_m *MockChainer) GetRound(roundNumber int64) round.RoundI {
	ret := _m.Called(roundNumber)

	var r0 round.RoundI
	if rf, ok := ret.Get(0).(func(int64) round.RoundI); ok {
		r0 = rf(roundNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(round.RoundI)
		}
	}

	return r0
}

// IsRoundGenerator provides a mock function with given fields: r, nd
func (_m *MockChainer) IsRoundGenerator(r round.RoundI, nd *node.Node) bool {
	ret := _m.Called(r, nd)

	var r0 bool
	if rf, ok := ret.Get(0).(func(round.RoundI, *node.Node) bool); ok {
		r0 = rf(r, nd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SubLFBTicket provides a mock function with given fields:
func (_m *MockChainer) SubLFBTicket() chan *LFBTicket {
	ret := _m.Called()

	var r0 chan *LFBTicket
	if rf, ok := ret.Get(0).(func() chan *LFBTicket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *LFBTicket)
		}
	}

	return r0
}

// UnsubLFBTicket provides a mock function with given fields: sub
func (_m *MockChainer) UnsubLFBTicket(sub chan *LFBTicket) {
	_m.Called(sub)
}

type mockConstructorTestingTNewMockChainer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockChainer creates a new instance of MockChainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockChainer(t mockConstructorTestingTNewMockChainer) *MockChainer {
	mock := &MockChainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
