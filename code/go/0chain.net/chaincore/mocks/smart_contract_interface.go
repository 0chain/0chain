// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	state "0chain.net/chaincore/chain/state"

	transaction "0chain.net/chaincore/transaction"

	url "net/url"
)

// SmartContractInterface is an autogenerated mock type for the SmartContractInterface type
type SmartContractInterface struct {
	mock.Mock
}

// Execute provides a mock function with given fields: t, funcName, input, balances
func (_m *SmartContractInterface) Execute(t *transaction.Transaction, funcName string, input []byte, balances state.StateContextI) (string, error) {
	ret := _m.Called(t, funcName, input, balances)

	var r0 string
	if rf, ok := ret.Get(0).(func(*transaction.Transaction, string, []byte, state.StateContextI) string); ok {
		r0 = rf(t, funcName, input, balances)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Transaction, string, []byte, state.StateContextI) error); ok {
		r1 = rf(t, funcName, input, balances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddress provides a mock function with given fields:
func (_m *SmartContractInterface) GetAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCost provides a mock function with given fields: t, funcName, balances
func (_m *SmartContractInterface) GetCost(t *transaction.Transaction, funcName string, balances state.StateContextI) (int, error) {
	ret := _m.Called(t, funcName, balances)

	var r0 int
	if rf, ok := ret.Get(0).(func(*transaction.Transaction, string, state.StateContextI) int); ok {
		r0 = rf(t, funcName, balances)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Transaction, string, state.StateContextI) error); ok {
		r1 = rf(t, funcName, balances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionStats provides a mock function with given fields:
func (_m *SmartContractInterface) GetExecutionStats() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetHandlerStats provides a mock function with given fields: ctx, params
func (_m *SmartContractInterface) GetHandlerStats(ctx context.Context, params url.Values) (interface{}, error) {
	ret := _m.Called(ctx, params)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) interface{}); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *SmartContractInterface) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewSmartContractInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSmartContractInterface creates a new instance of SmartContractInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSmartContractInterface(t mockConstructorTestingTNewSmartContractInterface) *SmartContractInterface {
	mock := &SmartContractInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
