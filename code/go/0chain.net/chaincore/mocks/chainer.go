// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	block "0chain.net/chaincore/block"

	event "0chain.net/smartcontract/dbs/event"

	mock "github.com/stretchr/testify/mock"

	transaction "0chain.net/chaincore/transaction"

	util "github.com/0chain/common/core/util"
)

// Chainer is an autogenerated mock type for the Chainer type
type Chainer struct {
	mock.Mock
}

// ComputeState provides a mock function with given fields: ctx, pb, waitC
func (_m *Chainer) ComputeState(ctx context.Context, pb *block.Block, waitC ...chan struct{}) error {
	_va := make([]interface{}, len(waitC))
	for _i := range waitC {
		_va[_i] = waitC[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block, ...chan struct{}) error); ok {
		r0 = rf(ctx, pb, waitC...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlockStateChange provides a mock function with given fields: b
func (_m *Chainer) GetBlockStateChange(b *block.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*block.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventDb provides a mock function with given fields:
func (_m *Chainer) GetEventDb() *event.EventDb {
	ret := _m.Called()

	var r0 *event.EventDb
	if rf, ok := ret.Get(0).(func() *event.EventDb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.EventDb)
		}
	}

	return r0
}

// GetPreviousBlock provides a mock function with given fields: ctx, b
func (_m *Chainer) GetPreviousBlock(ctx context.Context, b *block.Block) *block.Block {
	ret := _m.Called(ctx, b)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block) *block.Block); ok {
		r0 = rf(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	return r0
}

// GetStateDB provides a mock function with given fields:
func (_m *Chainer) GetStateDB() util.NodeDB {
	ret := _m.Called()

	var r0 util.NodeDB
	if rf, ok := ret.Get(0).(func() util.NodeDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.NodeDB)
		}
	}

	return r0
}

// UpdateState provides a mock function with given fields: ctx, b, bState, txn, waitC
func (_m *Chainer) UpdateState(ctx context.Context, b *block.Block, bState util.MerklePatriciaTrieI, txn *transaction.Transaction, waitC ...chan struct{}) ([]event.Event, error) {
	_va := make([]interface{}, len(waitC))
	for _i := range waitC {
		_va[_i] = waitC[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, b, bState, txn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func(context.Context, *block.Block, util.MerklePatriciaTrieI, *transaction.Transaction, ...chan struct{}) []event.Event); ok {
		r0 = rf(ctx, b, bState, txn, waitC...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *block.Block, util.MerklePatriciaTrieI, *transaction.Transaction, ...chan struct{}) error); ok {
		r1 = rf(ctx, b, bState, txn, waitC...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChainer interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainer creates a new instance of Chainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainer(t mockConstructorTestingTNewChainer) *Chainer {
	mock := &Chainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
