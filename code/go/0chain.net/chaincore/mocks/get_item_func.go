// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	state "0chain.net/chaincore/chain/state"
	mock "github.com/stretchr/testify/mock"
)

// GetItemFunc is an autogenerated mock type for the GetItemFunc type
type GetItemFunc[T interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: id, balance
func (_m *GetItemFunc[T]) Execute(id string, balance state.CommonStateContextI) (T, error) {
	ret := _m.Called(id, balance)

	var r0 T
	if rf, ok := ret.Get(0).(func(string, state.CommonStateContextI) T); ok {
		r0 = rf(id, balance)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, state.CommonStateContextI) error); ok {
		r1 = rf(id, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetItemFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetItemFunc creates a new instance of GetItemFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetItemFunc[T interface{}](t mockConstructorTestingTNewGetItemFunc) *GetItemFunc[T] {
	mock := &GetItemFunc[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
