// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bls "github.com/herumi/bls/ffi/go/bls"
	mock "github.com/stretchr/testify/mock"

	thresholdbls "0chain.net/chaincore/threshold/bls"
)

// DKGI is an autogenerated mock type for the DKGI type
type DKGI struct {
	mock.Mock
}

// AggregateSecretKeyShares provides a mock function with given fields: qual
func (_m *DKGI) AggregateSecretKeyShares(qual []bls.ID) {
	_m.Called(qual)
}

// ComputeDKGKeyShare provides a mock function with given fields: forID
func (_m *DKGI) ComputeDKGKeyShare(forID bls.ID) (bls.SecretKey, error) {
	ret := _m.Called(forID)

	var r0 bls.SecretKey
	if rf, ok := ret.Get(0).(func(bls.ID) bls.SecretKey); ok {
		r0 = rf(forID)
	} else {
		r0 = ret.Get(0).(bls.SecretKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bls.ID) error); ok {
		r1 = rf(forID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyShareForOther provides a mock function with given fields: to
func (_m *DKGI) GetKeyShareForOther(to bls.ID) *thresholdbls.DKGKeyShare {
	ret := _m.Called(to)

	var r0 *thresholdbls.DKGKeyShare
	if rf, ok := ret.Get(0).(func(bls.ID) *thresholdbls.DKGKeyShare); ok {
		r0 = rf(to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*thresholdbls.DKGKeyShare)
		}
	}

	return r0
}
