package node

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *poolDecode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Type"
	o = append(o, 0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o, err = z.Type.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// string "NodesMap"
	o = append(o, 0xa8, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.NodesMap)))
	keys_za0001 := make([]string, 0, len(z.NodesMap))
	for k := range z.NodesMap {
		keys_za0001 = append(keys_za0001, k)
	}
	msgp.Sort(keys_za0001)
	for _, k := range keys_za0001 {
		za0002 := z.NodesMap[k]
		o = msgp.AppendString(o, k)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "NodesMap", k)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *poolDecode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			bts, err = z.Type.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "NodesMap":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodesMap")
				return
			}
			if z.NodesMap == nil {
				z.NodesMap = make(map[string]*Node, zb0002)
			} else if len(z.NodesMap) > 0 {
				for key := range z.NodesMap {
					delete(z.NodesMap, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *Node
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NodesMap")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Node)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "NodesMap", za0001)
						return
					}
				}
				z.NodesMap[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *poolDecode) Msgsize() (s int) {
	s = 1 + 5 + z.Type.Msgsize() + 9 + msgp.MapHeaderSize
	if z.NodesMap != nil {
		for za0001, za0002 := range z.NodesMap {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}
