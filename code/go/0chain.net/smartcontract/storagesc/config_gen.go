package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Config) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 31
	// string "t"
	o = append(o, 0xde, 0x0, 0x1f, 0xa1, 0x74)
	o = msgp.AppendDuration(o, z.TimeUnit)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o, err = z.MaxMint.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxMint")
		return
	}
	// string "mt"
	o = append(o, 0xa2, 0x6d, 0x74)
	o, err = z.Minted.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Minted")
		return
	}
	// string "ma"
	o = append(o, 0xa2, 0x6d, 0x61)
	o = msgp.AppendInt64(o, z.MinAllocSize)
	// string "mcc"
	o = append(o, 0xa3, 0x6d, 0x63, 0x63)
	o = msgp.AppendDuration(o, z.MaxChallengeCompletionTime)
	// string "bc"
	o = append(o, 0xa2, 0x62, 0x63)
	o = msgp.AppendInt64(o, z.MinBlobberCapacity)
	// string "rp"
	o = append(o, 0xa2, 0x72, 0x70)
	if z.ReadPool == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "m"
		o = append(o, 0x81, 0xa1, 0x6d)
		o, err = z.ReadPool.MinLock.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ReadPool", "MinLock")
			return
		}
	}
	// string "wp"
	o = append(o, 0xa2, 0x77, 0x70)
	if z.WritePool == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "m"
		o = append(o, 0x81, 0xa1, 0x6d)
		o, err = z.WritePool.MinLock.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "WritePool", "MinLock")
			return
		}
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	if z.StakePool == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "m"
		o = append(o, 0x82, 0xa1, 0x6d)
		o = msgp.AppendDuration(o, z.StakePool.MinLockPeriod)
		// string "k"
		o = append(o, 0xa1, 0x6b)
		o = msgp.AppendFloat64(o, z.StakePool.KillSlash)
	}
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendFloat64(o, z.ValidatorReward)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendFloat64(o, z.BlobberSlash)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendDuration(o, z.HealthCheckPeriod)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendInt(o, z.MaxBlobbersPerAllocation)
	// string "mr"
	o = append(o, 0xa2, 0x6d, 0x72)
	o, err = z.MaxReadPrice.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxReadPrice")
		return
	}
	// string "w"
	o = append(o, 0xa1, 0x77)
	o, err = z.MaxWritePrice.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxWritePrice")
		return
	}
	// string "i"
	o = append(o, 0xa1, 0x69)
	o, err = z.MinWritePrice.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MinWritePrice")
		return
	}
	// string "cc"
	o = append(o, 0xa2, 0x63, 0x63)
	o = msgp.AppendFloat64(o, z.CancellationCharge)
	// string "ml"
	o = append(o, 0xa2, 0x6d, 0x6c)
	o = msgp.AppendFloat64(o, z.MinLockDemand)
	// string "f"
	o = append(o, 0xa1, 0x66)
	o, err = z.MaxTotalFreeAllocation.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxTotalFreeAllocation")
		return
	}
	// string "if"
	o = append(o, 0xa2, 0x69, 0x66)
	o, err = z.MaxIndividualFreeAllocation.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxIndividualFreeAllocation")
		return
	}
	// string "fa"
	o = append(o, 0xa2, 0x66, 0x61)
	o, err = z.FreeAllocationSettings.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "FreeAllocationSettings")
		return
	}
	// string "ce"
	o = append(o, 0xa2, 0x63, 0x65)
	o = msgp.AppendBool(o, z.ChallengeEnabled)
	// string "vp"
	o = append(o, 0xa2, 0x76, 0x70)
	o = msgp.AppendInt(o, z.ValidatorsPerChallenge)
	// string "nv"
	o = append(o, 0xa2, 0x6e, 0x76)
	o = msgp.AppendInt(o, z.NumValidatorsRewarded)
	// string "is"
	o = append(o, 0xa2, 0x69, 0x73)
	o, err = z.MinStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MinStake")
		return
	}
	// string "ms"
	o = append(o, 0xa2, 0x6d, 0x73)
	o, err = z.MaxStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxStake")
		return
	}
	// string "md"
	o = append(o, 0xa2, 0x6d, 0x64)
	o = msgp.AppendInt(o, z.MaxDelegates)
	// string "mc"
	o = append(o, 0xa2, 0x6d, 0x63)
	o = msgp.AppendFloat64(o, z.MaxCharge)
	// string "br"
	o = append(o, 0xa2, 0x62, 0x72)
	if z.BlockReward == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BlockReward.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BlockReward")
			return
		}
	}
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendString(o, z.OwnerId)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendMapHeader(o, uint32(len(z.Cost)))
	keys_za0001 := make([]string, 0, len(z.Cost))
	for k := range z.Cost {
		keys_za0001 = append(keys_za0001, k)
	}
	msgp.Sort(keys_za0001)
	for _, k := range keys_za0001 {
		za0002 := z.Cost[k]
		o = msgp.AppendString(o, k)
		o = msgp.AppendInt(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Config) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.TimeUnit, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeUnit")
				return
			}
		case "m":
			bts, err = z.MaxMint.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxMint")
				return
			}
		case "mt":
			bts, err = z.Minted.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Minted")
				return
			}
		case "ma":
			z.MinAllocSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinAllocSize")
				return
			}
		case "mcc":
			z.MaxChallengeCompletionTime, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxChallengeCompletionTime")
				return
			}
		case "bc":
			z.MinBlobberCapacity, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinBlobberCapacity")
				return
			}
		case "rp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ReadPool = nil
			} else {
				if z.ReadPool == nil {
					z.ReadPool = new(readPoolConfig)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReadPool")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ReadPool")
						return
					}
					switch msgp.UnsafeString(field) {
					case "m":
						bts, err = z.ReadPool.MinLock.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReadPool", "MinLock")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReadPool")
							return
						}
					}
				}
			}
		case "wp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.WritePool = nil
			} else {
				if z.WritePool == nil {
					z.WritePool = new(writePoolConfig)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WritePool")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "WritePool")
						return
					}
					switch msgp.UnsafeString(field) {
					case "m":
						bts, err = z.WritePool.MinLock.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "WritePool", "MinLock")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "WritePool")
							return
						}
					}
				}
			}
		case "s":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StakePool = nil
			} else {
				if z.StakePool == nil {
					z.StakePool = new(stakePoolConfig)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StakePool")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "StakePool")
						return
					}
					switch msgp.UnsafeString(field) {
					case "m":
						z.StakePool.MinLockPeriod, bts, err = msgp.ReadDurationBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "StakePool", "MinLockPeriod")
							return
						}
					case "k":
						z.StakePool.KillSlash, bts, err = msgp.ReadFloat64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "StakePool", "KillSlash")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "StakePool")
							return
						}
					}
				}
			}
		case "v":
			z.ValidatorReward, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorReward")
				return
			}
		case "b":
			z.BlobberSlash, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlobberSlash")
				return
			}
		case "h":
			z.HealthCheckPeriod, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HealthCheckPeriod")
				return
			}
		case "p":
			z.MaxBlobbersPerAllocation, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxBlobbersPerAllocation")
				return
			}
		case "mr":
			bts, err = z.MaxReadPrice.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxReadPrice")
				return
			}
		case "w":
			bts, err = z.MaxWritePrice.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxWritePrice")
				return
			}
		case "i":
			bts, err = z.MinWritePrice.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinWritePrice")
				return
			}
		case "cc":
			z.CancellationCharge, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CancellationCharge")
				return
			}
		case "ml":
			z.MinLockDemand, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinLockDemand")
				return
			}
		case "f":
			bts, err = z.MaxTotalFreeAllocation.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxTotalFreeAllocation")
				return
			}
		case "if":
			bts, err = z.MaxIndividualFreeAllocation.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxIndividualFreeAllocation")
				return
			}
		case "fa":
			bts, err = z.FreeAllocationSettings.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "FreeAllocationSettings")
				return
			}
		case "ce":
			z.ChallengeEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChallengeEnabled")
				return
			}
		case "vp":
			z.ValidatorsPerChallenge, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorsPerChallenge")
				return
			}
		case "nv":
			z.NumValidatorsRewarded, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumValidatorsRewarded")
				return
			}
		case "is":
			bts, err = z.MinStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinStake")
				return
			}
		case "ms":
			bts, err = z.MaxStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxStake")
				return
			}
		case "md":
			z.MaxDelegates, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxDelegates")
				return
			}
		case "mc":
			z.MaxCharge, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxCharge")
				return
			}
		case "br":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BlockReward = nil
			} else {
				if z.BlockReward == nil {
					z.BlockReward = new(blockReward)
				}
				bts, err = z.BlockReward.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlockReward")
					return
				}
			}
		case "o":
			z.OwnerId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OwnerId")
				return
			}
		case "c":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cost")
				return
			}
			if z.Cost == nil {
				z.Cost = make(map[string]int, zb0005)
			} else if len(z.Cost) > 0 {
				for key := range z.Cost {
					delete(z.Cost, key)
				}
			}
			for zb0005 > 0 {
				var za0001 string
				var za0002 int
				zb0005--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cost")
					return
				}
				za0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cost", za0001)
					return
				}
				z.Cost[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Config) Msgsize() (s int) {
	s = 3 + 2 + msgp.DurationSize + 2 + z.MaxMint.Msgsize() + 3 + z.Minted.Msgsize() + 3 + msgp.Int64Size + 4 + msgp.DurationSize + 3 + msgp.Int64Size + 3
	if z.ReadPool == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.ReadPool.MinLock.Msgsize()
	}
	s += 3
	if z.WritePool == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + z.WritePool.MinLock.Msgsize()
	}
	s += 2
	if z.StakePool == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + msgp.DurationSize + 2 + msgp.Float64Size
	}
	s += 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.DurationSize + 2 + msgp.IntSize + 3 + z.MaxReadPrice.Msgsize() + 2 + z.MaxWritePrice.Msgsize() + 2 + z.MinWritePrice.Msgsize() + 3 + msgp.Float64Size + 3 + msgp.Float64Size + 2 + z.MaxTotalFreeAllocation.Msgsize() + 3 + z.MaxIndividualFreeAllocation.Msgsize() + 3 + z.FreeAllocationSettings.Msgsize() + 3 + msgp.BoolSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + z.MinStake.Msgsize() + 3 + z.MaxStake.Msgsize() + 3 + msgp.IntSize + 3 + msgp.Float64Size + 3
	if z.BlockReward == nil {
		s += msgp.NilSize
	} else {
		s += z.BlockReward.Msgsize()
	}
	s += 2 + msgp.StringPrefixSize + len(z.OwnerId) + 2 + msgp.MapHeaderSize
	if z.Cost != nil {
		for za0001, za0002 := range z.Cost {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.IntSize
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *blockReward) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "r"
	o = append(o, 0x89, 0xa1, 0x72)
	o, err = z.BlockReward.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlockReward")
		return
	}
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendInt64(o, z.BlockRewardChangePeriod)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendFloat64(o, z.BlockRewardChangeRatio)
	// string "q"
	o = append(o, 0xa1, 0x71)
	o, err = z.QualifyingStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "QualifyingStake")
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendFloat64(o, z.SharderWeight)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendFloat64(o, z.MinerWeight)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt64(o, z.TriggerPeriod)
	// string "g"
	o = append(o, 0xa1, 0x67)
	// map header, size 3
	// string "l"
	o = append(o, 0x83, 0xa1, 0x6c)
	o = msgp.AppendFloat64(o, z.Gamma.Alpha)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendFloat64(o, z.Gamma.A)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendFloat64(o, z.Gamma.B)
	// string "z"
	o = append(o, 0xa1, 0x7a)
	// map header, size 3
	// string "i"
	o = append(o, 0x83, 0xa1, 0x69)
	o = msgp.AppendFloat64(o, z.Zeta.I)
	// string "k"
	o = append(o, 0xa1, 0x6b)
	o = msgp.AppendFloat64(o, z.Zeta.K)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendFloat64(o, z.Zeta.Mu)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *blockReward) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "r":
			bts, err = z.BlockReward.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockReward")
				return
			}
		case "c":
			z.BlockRewardChangePeriod, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockRewardChangePeriod")
				return
			}
		case "o":
			z.BlockRewardChangeRatio, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockRewardChangeRatio")
				return
			}
		case "q":
			bts, err = z.QualifyingStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "QualifyingStake")
				return
			}
		case "s":
			z.SharderWeight, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SharderWeight")
				return
			}
		case "m":
			z.MinerWeight, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinerWeight")
				return
			}
		case "t":
			z.TriggerPeriod, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TriggerPeriod")
				return
			}
		case "g":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gamma")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Gamma")
					return
				}
				switch msgp.UnsafeString(field) {
				case "l":
					z.Gamma.Alpha, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Gamma", "Alpha")
						return
					}
				case "a":
					z.Gamma.A, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Gamma", "A")
						return
					}
				case "b":
					z.Gamma.B, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Gamma", "B")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Gamma")
						return
					}
				}
			}
		case "z":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Zeta")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Zeta")
					return
				}
				switch msgp.UnsafeString(field) {
				case "i":
					z.Zeta.I, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Zeta", "I")
						return
					}
				case "k":
					z.Zeta.K, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Zeta", "K")
						return
					}
				case "m":
					z.Zeta.Mu, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Zeta", "Mu")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Zeta")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *blockReward) Msgsize() (s int) {
	s = 1 + 2 + z.BlockReward.Msgsize() + 2 + msgp.Int64Size + 2 + msgp.Float64Size + 2 + z.QualifyingStake.Msgsize() + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Int64Size + 2 + 1 + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + 1 + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z blockRewardGamma) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "l"
	o = append(o, 0x83, 0xa1, 0x6c)
	o = msgp.AppendFloat64(o, z.Alpha)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendFloat64(o, z.A)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendFloat64(o, z.B)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *blockRewardGamma) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "l":
			z.Alpha, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alpha")
				return
			}
		case "a":
			z.A, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "b":
			z.B, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z blockRewardGamma) Msgsize() (s int) {
	s = 1 + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z blockRewardZeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "i"
	o = append(o, 0x83, 0xa1, 0x69)
	o = msgp.AppendFloat64(o, z.I)
	// string "k"
	o = append(o, 0xa1, 0x6b)
	o = msgp.AppendFloat64(o, z.K)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendFloat64(o, z.Mu)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *blockRewardZeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.I, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		case "k":
			z.K, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "K")
				return
			}
		case "m":
			z.Mu, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mu")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z blockRewardZeta) Msgsize() (s int) {
	s = 1 + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 2 + msgp.Float64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *freeAllocationSettings) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "d"
	o = append(o, 0x86, 0xa1, 0x64)
	o = msgp.AppendInt(o, z.DataShards)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendInt(o, z.ParityShards)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt64(o, z.Size)
	// string "r"
	o = append(o, 0xa1, 0x72)
	o, err = z.ReadPriceRange.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ReadPriceRange")
		return
	}
	// string "w"
	o = append(o, 0xa1, 0x77)
	o, err = z.WritePriceRange.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "WritePriceRange")
		return
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendFloat64(o, z.ReadPoolFraction)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *freeAllocationSettings) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "d":
			z.DataShards, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataShards")
				return
			}
		case "p":
			z.ParityShards, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParityShards")
				return
			}
		case "s":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "r":
			bts, err = z.ReadPriceRange.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadPriceRange")
				return
			}
		case "w":
			bts, err = z.WritePriceRange.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "WritePriceRange")
				return
			}
		case "f":
			z.ReadPoolFraction, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadPoolFraction")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *freeAllocationSettings) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.IntSize + 2 + msgp.Int64Size + 2 + z.ReadPriceRange.Msgsize() + 2 + z.WritePriceRange.Msgsize() + 2 + msgp.Float64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *readPoolConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "m"
	o = append(o, 0x81, 0xa1, 0x6d)
	o, err = z.MinLock.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MinLock")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *readPoolConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "m":
			bts, err = z.MinLock.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinLock")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *readPoolConfig) Msgsize() (s int) {
	s = 1 + 2 + z.MinLock.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z stakePoolConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "m"
	o = append(o, 0x82, 0xa1, 0x6d)
	o = msgp.AppendDuration(o, z.MinLockPeriod)
	// string "k"
	o = append(o, 0xa1, 0x6b)
	o = msgp.AppendFloat64(o, z.KillSlash)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stakePoolConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "m":
			z.MinLockPeriod, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinLockPeriod")
				return
			}
		case "k":
			z.KillSlash, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "KillSlash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z stakePoolConfig) Msgsize() (s int) {
	s = 1 + 2 + msgp.DurationSize + 2 + msgp.Float64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *writePoolConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "m"
	o = append(o, 0x81, 0xa1, 0x6d)
	o, err = z.MinLock.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MinLock")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *writePoolConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "m":
			bts, err = z.MinLock.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinLock")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *writePoolConfig) Msgsize() (s int) {
	s = 1 + 2 + z.MinLock.Msgsize()
	return
}
