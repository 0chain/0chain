package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *blobberChallengeDecode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "BlobberID"
	o = append(o, 0x83, 0xa9, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.BlobberID)
	// string "LatestCompletedChallenge"
	o = append(o, 0xb8, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	if z.LatestCompletedChallenge == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.LatestCompletedChallenge.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "LatestCompletedChallenge")
			return
		}
	}
	// string "ChallengeIDs"
	o = append(o, 0xac, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ChallengeIDs)))
	for za0001 := range z.ChallengeIDs {
		o = msgp.AppendString(o, z.ChallengeIDs[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *blobberChallengeDecode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BlobberID":
			z.BlobberID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlobberID")
				return
			}
		case "LatestCompletedChallenge":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LatestCompletedChallenge = nil
			} else {
				if z.LatestCompletedChallenge == nil {
					z.LatestCompletedChallenge = new(StorageChallenge)
				}
				bts, err = z.LatestCompletedChallenge.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LatestCompletedChallenge")
					return
				}
			}
		case "ChallengeIDs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChallengeIDs")
				return
			}
			if cap(z.ChallengeIDs) >= int(zb0002) {
				z.ChallengeIDs = (z.ChallengeIDs)[:zb0002]
			} else {
				z.ChallengeIDs = make([]string, zb0002)
			}
			for za0001 := range z.ChallengeIDs {
				z.ChallengeIDs[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ChallengeIDs", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *blobberChallengeDecode) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.BlobberID) + 25
	if z.LatestCompletedChallenge == nil {
		s += msgp.NilSize
	} else {
		s += z.LatestCompletedChallenge.Msgsize()
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0001 := range z.ChallengeIDs {
		s += msgp.StringPrefixSize + len(z.ChallengeIDs[za0001])
	}
	return
}
