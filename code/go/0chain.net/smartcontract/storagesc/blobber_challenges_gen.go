package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *BlobOpenChallenge) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "CreatedAt"
	o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o, err = z.CreatedAt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlobOpenChallenge) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "CreatedAt":
			bts, err = z.CreatedAt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlobOpenChallenge) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 10 + z.CreatedAt.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *blobberChallengeDecode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "BlobberID"
	o = append(o, 0x83, 0xa9, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.BlobberID)
	// string "LatestCompletedChallenge"
	o = append(o, 0xb8, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	if z.LatestCompletedChallenge == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.LatestCompletedChallenge.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "LatestCompletedChallenge")
			return
		}
	}
	// string "OpenChallenges"
	o = append(o, 0xae, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.OpenChallenges)))
	for za0001 := range z.OpenChallenges {
		// map header, size 2
		// string "ID"
		o = append(o, 0x82, 0xa2, 0x49, 0x44)
		o = msgp.AppendString(o, z.OpenChallenges[za0001].ID)
		// string "CreatedAt"
		o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
		o, err = z.OpenChallenges[za0001].CreatedAt.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "OpenChallenges", za0001, "CreatedAt")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *blobberChallengeDecode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BlobberID":
			z.BlobberID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlobberID")
				return
			}
		case "LatestCompletedChallenge":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LatestCompletedChallenge = nil
			} else {
				if z.LatestCompletedChallenge == nil {
					z.LatestCompletedChallenge = new(StorageChallenge)
				}
				bts, err = z.LatestCompletedChallenge.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LatestCompletedChallenge")
					return
				}
			}
		case "OpenChallenges":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenChallenges")
				return
			}
			if cap(z.OpenChallenges) >= int(zb0002) {
				z.OpenChallenges = (z.OpenChallenges)[:zb0002]
			} else {
				z.OpenChallenges = make([]BlobOpenChallenge, zb0002)
			}
			for za0001 := range z.OpenChallenges {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpenChallenges", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpenChallenges", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "ID":
						z.OpenChallenges[za0001].ID, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "OpenChallenges", za0001, "ID")
							return
						}
					case "CreatedAt":
						bts, err = z.OpenChallenges[za0001].CreatedAt.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "OpenChallenges", za0001, "CreatedAt")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "OpenChallenges", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *blobberChallengeDecode) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.BlobberID) + 25
	if z.LatestCompletedChallenge == nil {
		s += msgp.NilSize
	} else {
		s += z.LatestCompletedChallenge.Msgsize()
	}
	s += 15 + msgp.ArrayHeaderSize
	for za0001 := range z.OpenChallenges {
		s += 1 + 3 + msgp.StringPrefixSize + len(z.OpenChallenges[za0001].ID) + 10 + z.OpenChallenges[za0001].CreatedAt.Msgsize()
	}
	return
}
