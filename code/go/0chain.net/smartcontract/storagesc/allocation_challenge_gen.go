package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z AllocOpenChallenge) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "i"
	o = append(o, 0x83, 0xa1, 0x69)
	o = msgp.AppendInt8(o, z.BlobberIndex)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt64(o, z.CreatedAt)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.ChallengeID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AllocOpenChallenge) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.BlobberIndex, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlobberIndex")
				return
			}
		case "t":
			z.CreatedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "c":
			z.ChallengeID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChallengeID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AllocOpenChallenge) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int8Size + 2 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.ChallengeID)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AllocationChallenges) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "o"
	o = append(o, 0x81, 0xa1, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.OpenChallenges)))
	for za0001 := range z.OpenChallenges {
		if z.OpenChallenges[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "i"
			o = append(o, 0x83, 0xa1, 0x69)
			o = msgp.AppendInt8(o, z.OpenChallenges[za0001].BlobberIndex)
			// string "t"
			o = append(o, 0xa1, 0x74)
			o = msgp.AppendInt64(o, z.OpenChallenges[za0001].CreatedAt)
			// string "c"
			o = append(o, 0xa1, 0x63)
			o = msgp.AppendString(o, z.OpenChallenges[za0001].ChallengeID)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AllocationChallenges) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "o":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenChallenges")
				return
			}
			if cap(z.OpenChallenges) >= int(zb0002) {
				z.OpenChallenges = (z.OpenChallenges)[:zb0002]
			} else {
				z.OpenChallenges = make([]*AllocOpenChallenge, zb0002)
			}
			for za0001 := range z.OpenChallenges {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.OpenChallenges[za0001] = nil
				} else {
					if z.OpenChallenges[za0001] == nil {
						z.OpenChallenges[za0001] = new(AllocOpenChallenge)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpenChallenges", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "OpenChallenges", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "i":
							z.OpenChallenges[za0001].BlobberIndex, bts, err = msgp.ReadInt8Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OpenChallenges", za0001, "BlobberIndex")
								return
							}
						case "t":
							z.OpenChallenges[za0001].CreatedAt, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OpenChallenges", za0001, "CreatedAt")
								return
							}
						case "c":
							z.OpenChallenges[za0001].ChallengeID, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OpenChallenges", za0001, "ChallengeID")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "OpenChallenges", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AllocationChallenges) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.OpenChallenges {
		if z.OpenChallenges[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 2 + msgp.Int8Size + 2 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.OpenChallenges[za0001].ChallengeID)
		}
	}
	return
}
