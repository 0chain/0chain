package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *UserStakePools) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Pools"
	o = append(o, 0x81, 0xa5, 0x50, 0x6f, 0x6f, 0x6c, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Pools)))
	for za0001, za0002 := range z.Pools {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendString(o, za0002[za0003])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserStakePools) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pools":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pools")
				return
			}
			if z.Pools == nil {
				z.Pools = make(map[string][]string, zb0002)
			} else if len(z.Pools) > 0 {
				for key := range z.Pools {
					delete(z.Pools, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pools")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pools", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]string, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pools", za0001, za0003)
						return
					}
				}
				z.Pools[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserStakePools) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Pools != nil {
		for za0001, za0002 := range z.Pools {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += msgp.StringPrefixSize + len(za0002[za0003])
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *delegatePool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ZcnPool"
	o = append(o, 0x86, 0xa7, 0x5a, 0x63, 0x6e, 0x50, 0x6f, 0x6f, 0x6c)
	o, err = z.ZcnPool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ZcnPool")
		return
	}
	// string "MintAt"
	o = append(o, 0xa6, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x74)
	o, err = z.MintAt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MintAt")
		return
	}
	// string "DelegateID"
	o = append(o, 0xaa, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, z.DelegateID)
	// string "Rewards"
	o = append(o, 0xa7, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	o, err = z.Rewards.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards")
		return
	}
	// string "Penalty"
	o = append(o, 0xa7, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79)
	o, err = z.Penalty.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Penalty")
		return
	}
	// string "UnStake"
	o = append(o, 0xa7, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o = msgp.AppendBool(o, z.UnStake)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *delegatePool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ZcnPool":
			bts, err = z.ZcnPool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZcnPool")
				return
			}
		case "MintAt":
			bts, err = z.MintAt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MintAt")
				return
			}
		case "DelegateID":
			z.DelegateID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DelegateID")
				return
			}
		case "Rewards":
			bts, err = z.Rewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rewards")
				return
			}
		case "Penalty":
			bts, err = z.Penalty.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Penalty")
				return
			}
		case "UnStake":
			z.UnStake, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnStake")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *delegatePool) Msgsize() (s int) {
	s = 1 + 8 + z.ZcnPool.Msgsize() + 7 + z.MintAt.Msgsize() + 11 + msgp.StringPrefixSize + len(z.DelegateID) + 8 + z.Rewards.Msgsize() + 8 + z.Penalty.Msgsize() + 8 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *delegatePoolStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "Balance"
	o = append(o, 0xa7, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = z.Balance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	// string "DelegateID"
	o = append(o, 0xaa, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, z.DelegateID)
	// string "Rewards"
	o = append(o, 0xa7, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	o, err = z.Rewards.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards")
		return
	}
	// string "Penalty"
	o = append(o, 0xa7, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79)
	o, err = z.Penalty.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Penalty")
		return
	}
	// string "UnStake"
	o = append(o, 0xa7, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o = msgp.AppendBool(o, z.UnStake)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *delegatePoolStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Balance":
			bts, err = z.Balance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		case "DelegateID":
			z.DelegateID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DelegateID")
				return
			}
		case "Rewards":
			bts, err = z.Rewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rewards")
				return
			}
		case "Penalty":
			bts, err = z.Penalty.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Penalty")
				return
			}
		case "UnStake":
			z.UnStake, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnStake")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *delegatePoolStat) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 8 + z.Balance.Msgsize() + 11 + msgp.StringPrefixSize + len(z.DelegateID) + 8 + z.Rewards.Msgsize() + 8 + z.Penalty.Msgsize() + 8 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *rewardsStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Charge"
	o = append(o, 0x83, 0xa6, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65)
	o, err = z.Charge.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Charge")
		return
	}
	// string "Blobber"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72)
	o, err = z.Blobber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Blobber")
		return
	}
	// string "Validator"
	o = append(o, 0xa9, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72)
	o, err = z.Validator.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Validator")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *rewardsStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Charge":
			bts, err = z.Charge.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Charge")
				return
			}
		case "Blobber":
			bts, err = z.Blobber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blobber")
				return
			}
		case "Validator":
			bts, err = z.Validator.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Validator")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *rewardsStat) Msgsize() (s int) {
	s = 1 + 7 + z.Charge.Msgsize() + 8 + z.Blobber.Msgsize() + 10 + z.Validator.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *stakePool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Pools"
	o = append(o, 0x85, 0xa5, 0x50, 0x6f, 0x6f, 0x6c, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Pools)))
	for za0001, za0002 := range z.Pools {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Pools", za0001)
				return
			}
		}
	}
	// string "TotalOffers"
	o = append(o, 0xab, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73)
	o, err = z.TotalOffers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalOffers")
		return
	}
	// string "TotalUnStake"
	o = append(o, 0xac, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o, err = z.TotalUnStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalUnStake")
		return
	}
	// string "Rewards"
	o = append(o, 0xa7, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	// map header, size 3
	// string "Charge"
	o = append(o, 0x83, 0xa6, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65)
	o, err = z.Rewards.Charge.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards", "Charge")
		return
	}
	// string "Blobber"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72)
	o, err = z.Rewards.Blobber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards", "Blobber")
		return
	}
	// string "Validator"
	o = append(o, 0xa9, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72)
	o, err = z.Rewards.Validator.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards", "Validator")
		return
	}
	// string "Settings"
	o = append(o, 0xa8, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73)
	o, err = z.Settings.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Settings")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stakePool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pools":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pools")
				return
			}
			if z.Pools == nil {
				z.Pools = make(map[string]*delegatePool, zb0002)
			} else if len(z.Pools) > 0 {
				for key := range z.Pools {
					delete(z.Pools, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *delegatePool
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pools")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(delegatePool)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pools", za0001)
						return
					}
				}
				z.Pools[za0001] = za0002
			}
		case "TotalOffers":
			bts, err = z.TotalOffers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalOffers")
				return
			}
		case "TotalUnStake":
			bts, err = z.TotalUnStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalUnStake")
				return
			}
		case "Rewards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rewards")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rewards")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Charge":
					bts, err = z.Rewards.Charge.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rewards", "Charge")
						return
					}
				case "Blobber":
					bts, err = z.Rewards.Blobber.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rewards", "Blobber")
						return
					}
				case "Validator":
					bts, err = z.Rewards.Validator.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rewards", "Validator")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rewards")
						return
					}
				}
			}
		case "Settings":
			bts, err = z.Settings.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Settings")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *stakePool) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Pools != nil {
		for za0001, za0002 := range z.Pools {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 12 + z.TotalOffers.Msgsize() + 13 + z.TotalUnStake.Msgsize() + 8 + 1 + 7 + z.Rewards.Charge.Msgsize() + 8 + z.Rewards.Blobber.Msgsize() + 10 + z.Rewards.Validator.Msgsize() + 9 + z.Settings.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *stakePoolRewards) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Charge"
	o = append(o, 0x83, 0xa6, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65)
	o, err = z.Charge.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Charge")
		return
	}
	// string "Blobber"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72)
	o, err = z.Blobber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Blobber")
		return
	}
	// string "Validator"
	o = append(o, 0xa9, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72)
	o, err = z.Validator.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Validator")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stakePoolRewards) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Charge":
			bts, err = z.Charge.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Charge")
				return
			}
		case "Blobber":
			bts, err = z.Blobber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blobber")
				return
			}
		case "Validator":
			bts, err = z.Validator.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Validator")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *stakePoolRewards) Msgsize() (s int) {
	s = 1 + 7 + z.Charge.Msgsize() + 8 + z.Blobber.Msgsize() + 10 + z.Validator.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *stakePoolSettings) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "DelegateWallet"
	o = append(o, 0x85, 0xae, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74)
	o = msgp.AppendString(o, z.DelegateWallet)
	// string "MinStake"
	o = append(o, 0xa8, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o, err = z.MinStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MinStake")
		return
	}
	// string "MaxStake"
	o = append(o, 0xa8, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o, err = z.MaxStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxStake")
		return
	}
	// string "NumDelegates"
	o = append(o, 0xac, 0x4e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73)
	o = msgp.AppendInt(o, z.NumDelegates)
	// string "ServiceCharge"
	o = append(o, 0xad, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65)
	o = msgp.AppendFloat64(o, z.ServiceCharge)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stakePoolSettings) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DelegateWallet":
			z.DelegateWallet, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DelegateWallet")
				return
			}
		case "MinStake":
			bts, err = z.MinStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinStake")
				return
			}
		case "MaxStake":
			bts, err = z.MaxStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxStake")
				return
			}
		case "NumDelegates":
			z.NumDelegates, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumDelegates")
				return
			}
		case "ServiceCharge":
			z.ServiceCharge, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServiceCharge")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *stakePoolSettings) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.DelegateWallet) + 9 + z.MinStake.Msgsize() + 9 + z.MaxStake.Msgsize() + 13 + msgp.IntSize + 14 + msgp.Float64Size
	return
}
