package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *readPool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OwnerBalance"
	o = append(o, 0x82, 0xac, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = z.OwnerBalance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OwnerBalance")
		return
	}
	// string "VisitorBalance"
	o = append(o, 0xae, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = z.VisitorBalance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "VisitorBalance")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *readPool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OwnerBalance":
			bts, err = z.OwnerBalance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OwnerBalance")
				return
			}
		case "VisitorBalance":
			bts, err = z.VisitorBalance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "VisitorBalance")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *readPool) Msgsize() (s int) {
	s = 1 + 13 + z.OwnerBalance.Msgsize() + 15 + z.VisitorBalance.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z readPoolLockRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "IsOwner"
	o = append(o, 0x83, 0xa7, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsOwner)
	// string "TargetId"
	o = append(o, 0xa8, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64)
	o = msgp.AppendString(o, z.TargetId)
	// string "MintTokens"
	o = append(o, 0xaa, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73)
	o = msgp.AppendBool(o, z.MintTokens)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *readPoolLockRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsOwner":
			z.IsOwner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsOwner")
				return
			}
		case "TargetId":
			z.TargetId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetId")
				return
			}
		case "MintTokens":
			z.MintTokens, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MintTokens")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z readPoolLockRequest) Msgsize() (s int) {
	s = 1 + 8 + msgp.BoolSize + 9 + msgp.StringPrefixSize + len(z.TargetId) + 11 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z readPoolUnlockRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "IsOwner"
	o = append(o, 0x81, 0xa7, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsOwner)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *readPoolUnlockRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsOwner":
			z.IsOwner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsOwner")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z readPoolUnlockRequest) Msgsize() (s int) {
	s = 1 + 8 + msgp.BoolSize
	return
}
