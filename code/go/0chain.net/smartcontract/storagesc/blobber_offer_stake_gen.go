package storagesc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *BlobberOfferStake) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "o"
	o = append(o, 0x85, 0xa1, 0x6f)
	o, err = z.TotalOffers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalOffers")
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o, err = z.TotalStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalStake")
		return
	}
	// string "r"
	o = append(o, 0xa1, 0x72)
	o, err = z.Rewards.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards")
		return
	}
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendInt64(o, z.Allocated)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendInt64(o, z.SavedData)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlobberOfferStake) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "o":
			bts, err = z.TotalOffers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalOffers")
				return
			}
		case "s":
			bts, err = z.TotalStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalStake")
				return
			}
		case "r":
			bts, err = z.Rewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rewards")
				return
			}
		case "a":
			z.Allocated, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Allocated")
				return
			}
		case "d":
			z.SavedData, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SavedData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlobberOfferStake) Msgsize() (s int) {
	s = 1 + 2 + z.TotalOffers.Msgsize() + 2 + z.TotalStake.Msgsize() + 2 + z.Rewards.Msgsize() + 2 + msgp.Int64Size + 2 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BlobberOfferStakeList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for za0001 := range z {
		if z[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlobberOfferStakeList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(BlobberOfferStakeList, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(BlobberOfferStake)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BlobberOfferStakeList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}
