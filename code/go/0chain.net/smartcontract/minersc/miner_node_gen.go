package minersc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	sci "0chain.net/chaincore/smartcontractinterface"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *ZcnTokenPool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ZcnPool"
	o = append(o, 0x82, 0xa7, 0x5a, 0x63, 0x6e, 0x50, 0x6f, 0x6f, 0x6c)
	o, err = z.ZcnPool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ZcnPool")
		return
	}
	// string "ViewChangeLock"
	o = append(o, 0xae, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x6b)
	if z.ViewChangeLock == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ViewChangeLock.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ViewChangeLock")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ZcnTokenPool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ZcnPool":
			bts, err = z.ZcnPool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZcnPool")
				return
			}
		case "ViewChangeLock":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ViewChangeLock = nil
			} else {
				if z.ViewChangeLock == nil {
					z.ViewChangeLock = new(ViewChangeLock)
				}
				bts, err = z.ViewChangeLock.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ViewChangeLock")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ZcnTokenPool) Msgsize() (s int) {
	s = 1 + 8 + z.ZcnPool.Msgsize() + 15
	if z.ViewChangeLock == nil {
		s += msgp.NilSize
	} else {
		s += z.ViewChangeLock.Msgsize()
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *delegatePool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "PoolStats"
	o = append(o, 0x82, 0xa9, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73)
	if z.PoolStats == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.PoolStats.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "PoolStats")
			return
		}
	}
	// string "ZcnTokenPool"
	o = append(o, 0xac, 0x5a, 0x63, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c)
	if z.ZcnTokenPool == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "ZcnPool"
		o = append(o, 0x82, 0xa7, 0x5a, 0x63, 0x6e, 0x50, 0x6f, 0x6f, 0x6c)
		o, err = z.ZcnTokenPool.ZcnPool.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ZcnTokenPool", "ZcnPool")
			return
		}
		// string "ViewChangeLock"
		o = append(o, 0xae, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x6b)
		if z.ZcnTokenPool.ViewChangeLock == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ZcnTokenPool.ViewChangeLock.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ZcnTokenPool", "ViewChangeLock")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *delegatePool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PoolStats":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.PoolStats = nil
			} else {
				if z.PoolStats == nil {
					z.PoolStats = new(sci.PoolStats)
				}
				bts, err = z.PoolStats.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PoolStats")
					return
				}
			}
		case "ZcnTokenPool":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ZcnTokenPool = nil
			} else {
				if z.ZcnTokenPool == nil {
					z.ZcnTokenPool = new(ZcnTokenPool)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ZcnTokenPool")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZcnTokenPool")
						return
					}
					switch msgp.UnsafeString(field) {
					case "ZcnPool":
						bts, err = z.ZcnTokenPool.ZcnPool.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ZcnTokenPool", "ZcnPool")
							return
						}
					case "ViewChangeLock":
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.ZcnTokenPool.ViewChangeLock = nil
						} else {
							if z.ZcnTokenPool.ViewChangeLock == nil {
								z.ZcnTokenPool.ViewChangeLock = new(ViewChangeLock)
							}
							bts, err = z.ZcnTokenPool.ViewChangeLock.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "ZcnTokenPool", "ViewChangeLock")
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ZcnTokenPool")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *delegatePool) Msgsize() (s int) {
	s = 1 + 10
	if z.PoolStats == nil {
		s += msgp.NilSize
	} else {
		s += z.PoolStats.Msgsize()
	}
	s += 13
	if z.ZcnTokenPool == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + z.ZcnTokenPool.ZcnPool.Msgsize() + 15
		if z.ZcnTokenPool.ViewChangeLock == nil {
			s += msgp.NilSize
		} else {
			s += z.ZcnTokenPool.ViewChangeLock.Msgsize()
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *minerNodeDecode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "SimpleNode"
	o = append(o, 0x84, 0xaa, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65)
	if z.SimpleNode == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.SimpleNode.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "SimpleNode")
			return
		}
	}
	// string "Pending"
	o = append(o, 0xa7, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendMapHeader(o, uint32(len(z.Pending)))
	keys_za0001 := make([]string, 0, len(z.Pending))
	for k := range z.Pending {
		keys_za0001 = append(keys_za0001, k)
	}
	msgp.Sort(keys_za0001)
	for _, k := range keys_za0001 {
		za0002 := z.Pending[k]
		o = msgp.AppendString(o, k)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Pending", k)
				return
			}
		}
	}
	// string "Active"
	o = append(o, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.Active)))
	keys_za0003 := make([]string, 0, len(z.Active))
	for k := range z.Active {
		keys_za0003 = append(keys_za0003, k)
	}
	msgp.Sort(keys_za0003)
	for _, k := range keys_za0003 {
		za0004 := z.Active[k]
		o = msgp.AppendString(o, k)
		if za0004 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0004.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Active", k)
				return
			}
		}
	}
	// string "Deleting"
	o = append(o, 0xa8, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67)
	o = msgp.AppendMapHeader(o, uint32(len(z.Deleting)))
	keys_za0005 := make([]string, 0, len(z.Deleting))
	for k := range z.Deleting {
		keys_za0005 = append(keys_za0005, k)
	}
	msgp.Sort(keys_za0005)
	for _, k := range keys_za0005 {
		za0006 := z.Deleting[k]
		o = msgp.AppendString(o, k)
		if za0006 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0006.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Deleting", k)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *minerNodeDecode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SimpleNode":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SimpleNode = nil
			} else {
				if z.SimpleNode == nil {
					z.SimpleNode = new(SimpleNode)
				}
				bts, err = z.SimpleNode.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SimpleNode")
					return
				}
			}
		case "Pending":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pending")
				return
			}
			if z.Pending == nil {
				z.Pending = make(map[string]*delegatePool, zb0002)
			} else if len(z.Pending) > 0 {
				for key := range z.Pending {
					delete(z.Pending, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *delegatePool
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pending")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(delegatePool)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Pending", za0001)
						return
					}
				}
				z.Pending[za0001] = za0002
			}
		case "Active":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Active")
				return
			}
			if z.Active == nil {
				z.Active = make(map[string]*delegatePool, zb0003)
			} else if len(z.Active) > 0 {
				for key := range z.Active {
					delete(z.Active, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 *delegatePool
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Active")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0004 = nil
				} else {
					if za0004 == nil {
						za0004 = new(delegatePool)
					}
					bts, err = za0004.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Active", za0003)
						return
					}
				}
				z.Active[za0003] = za0004
			}
		case "Deleting":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Deleting")
				return
			}
			if z.Deleting == nil {
				z.Deleting = make(map[string]*delegatePool, zb0004)
			} else if len(z.Deleting) > 0 {
				for key := range z.Deleting {
					delete(z.Deleting, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 *delegatePool
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Deleting")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0006 = nil
				} else {
					if za0006 == nil {
						za0006 = new(delegatePool)
					}
					bts, err = za0006.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Deleting", za0005)
						return
					}
				}
				z.Deleting[za0005] = za0006
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *minerNodeDecode) Msgsize() (s int) {
	s = 1 + 11
	if z.SimpleNode == nil {
		s += msgp.NilSize
	} else {
		s += z.SimpleNode.Msgsize()
	}
	s += 8 + msgp.MapHeaderSize
	if z.Pending != nil {
		for za0001, za0002 := range z.Pending {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 7 + msgp.MapHeaderSize
	if z.Active != nil {
		for za0003, za0004 := range z.Active {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003)
			if za0004 == nil {
				s += msgp.NilSize
			} else {
				s += za0004.Msgsize()
			}
		}
	}
	s += 9 + msgp.MapHeaderSize
	if z.Deleting != nil {
		for za0005, za0006 := range z.Deleting {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005)
			if za0006 == nil {
				s += msgp.NilSize
			} else {
				s += za0006.Msgsize()
			}
		}
	}
	return
}
