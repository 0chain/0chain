// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	currency "github.com/0chain/common/core/currency"
	mock "github.com/stretchr/testify/mock"

	spenum "0chain.net/smartcontract/stakepool/spenum"

	stakepool "0chain.net/smartcontract/stakepool"

	state "0chain.net/chaincore/chain/state"

	transaction "0chain.net/chaincore/transaction"
)

// AbstractStakePool is an autogenerated mock type for the AbstractStakePool type
type AbstractStakePool struct {
	mock.Mock
}

// EmitStakeEvent provides a mock function with given fields: providerType, providerID, balances
func (_m *AbstractStakePool) EmitStakeEvent(providerType spenum.Provider, providerID string, balances state.StateContextI) error {
	ret := _m.Called(providerType, providerID, balances)

	var r0 error
	if rf, ok := ret.Get(0).(func(spenum.Provider, string, state.StateContextI) error); ok {
		r0 = rf(providerType, providerID, balances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitUnStakeEvent provides a mock function with given fields: providerType, providerID, amount, balances
func (_m *AbstractStakePool) EmitUnStakeEvent(providerType spenum.Provider, providerID string, amount currency.Coin, balances state.StateContextI) error {
	ret := _m.Called(providerType, providerID, amount, balances)

	var r0 error
	if rf, ok := ret.Get(0).(func(spenum.Provider, string, currency.Coin, state.StateContextI) error); ok {
		r0 = rf(providerType, providerID, amount, balances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Empty provides a mock function with given fields: sscID, poolID, clientID, balances
func (_m *AbstractStakePool) Empty(sscID string, poolID string, clientID string, balances state.StateContextI) error {
	ret := _m.Called(sscID, poolID, clientID, balances)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, state.StateContextI) error); ok {
		r0 = rf(sscID, poolID, clientID, balances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPools provides a mock function with given fields:
func (_m *AbstractStakePool) GetPools() map[string]*stakepool.DelegatePool {
	ret := _m.Called()

	var r0 map[string]*stakepool.DelegatePool
	if rf, ok := ret.Get(0).(func() map[string]*stakepool.DelegatePool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*stakepool.DelegatePool)
		}
	}

	return r0
}

// GetSettings provides a mock function with given fields:
func (_m *AbstractStakePool) GetSettings() stakepool.Settings {
	ret := _m.Called()

	var r0 stakepool.Settings
	if rf, ok := ret.Get(0).(func() stakepool.Settings); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stakepool.Settings)
	}

	return r0
}

// HasStakePool provides a mock function with given fields: user
func (_m *AbstractStakePool) HasStakePool(user string) bool {
	ret := _m.Called(user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LockPool provides a mock function with given fields: txn, providerType, providerId, status, balances
func (_m *AbstractStakePool) LockPool(txn *transaction.Transaction, providerType spenum.Provider, providerId string, status spenum.PoolStatus, balances state.StateContextI) (string, error) {
	ret := _m.Called(txn, providerType, providerId, status, balances)

	var r0 string
	if rf, ok := ret.Get(0).(func(*transaction.Transaction, spenum.Provider, string, spenum.PoolStatus, state.StateContextI) string); ok {
		r0 = rf(txn, providerType, providerId, status, balances)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*transaction.Transaction, spenum.Provider, string, spenum.PoolStatus, state.StateContextI) error); ok {
		r1 = rf(txn, providerType, providerId, status, balances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: providerType, providerID, balances
func (_m *AbstractStakePool) Save(providerType spenum.Provider, providerID string, balances state.StateContextI) error {
	ret := _m.Called(providerType, providerID, balances)

	var r0 error
	if rf, ok := ret.Get(0).(func(spenum.Provider, string, state.StateContextI) error); ok {
		r0 = rf(providerType, providerID, balances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockPool provides a mock function with given fields: clientID, providerType, providerId, balances
func (_m *AbstractStakePool) UnlockPool(clientID string, providerType spenum.Provider, providerId string, balances state.StateContextI) (string, error) {
	ret := _m.Called(clientID, providerType, providerId, balances)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, spenum.Provider, string, state.StateContextI) string); ok {
		r0 = rf(clientID, providerType, providerId, balances)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, spenum.Provider, string, state.StateContextI) error); ok {
		r1 = rf(clientID, providerType, providerId, balances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAbstractStakePool interface {
	mock.TestingT
	Cleanup(func())
}

// NewAbstractStakePool creates a new instance of AbstractStakePool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAbstractStakePool(t mockConstructorTestingTNewAbstractStakePool) *AbstractStakePool {
	mock := &AbstractStakePool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
