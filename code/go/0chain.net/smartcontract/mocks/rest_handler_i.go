// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	rest "0chain.net/smartcontract/rest"
	mock "github.com/stretchr/testify/mock"

	state "0chain.net/chaincore/chain/state"
)

// RestHandlerI is an autogenerated mock type for the RestHandlerI type
type RestHandlerI struct {
	mock.Mock
}

// GetQueryStateContext provides a mock function with given fields:
func (_m *RestHandlerI) GetQueryStateContext() state.TimedQueryStateContextI {
	ret := _m.Called()

	var r0 state.TimedQueryStateContextI
	if rf, ok := ret.Get(0).(func() state.TimedQueryStateContextI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.TimedQueryStateContextI)
		}
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *RestHandlerI) Register(_a0 []rest.Endpoint) {
	_m.Called(_a0)
}

// SetQueryStateContext provides a mock function with given fields: _a0
func (_m *RestHandlerI) SetQueryStateContext(_a0 state.TimedQueryStateContextI) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewRestHandlerI interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestHandlerI creates a new instance of RestHandlerI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestHandlerI(t mockConstructorTestingTNewRestHandlerI) *RestHandlerI {
	mock := &RestHandlerI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
