// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	storagesc "0chain.net/smartcontract/storagesc"
	mock "github.com/stretchr/testify/mock"
)

// filterBlobberFunc is an autogenerated mock type for the filterBlobberFunc type
type filterBlobberFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: blobber
func (_m *filterBlobberFunc) Execute(blobber *storagesc.StorageNode) (bool, error) {
	ret := _m.Called(blobber)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*storagesc.StorageNode) bool); ok {
		r0 = rf(blobber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storagesc.StorageNode) error); ok {
		r1 = rf(blobber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewFilterBlobberFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newFilterBlobberFunc creates a new instance of filterBlobberFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newFilterBlobberFunc(t mockConstructorTestingTnewFilterBlobberFunc) *filterBlobberFunc {
	mock := &filterBlobberFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
