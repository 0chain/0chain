// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	currency "github.com/0chain/common/core/currency"
	mock "github.com/stretchr/testify/mock"

	state "0chain.net/chaincore/chain/state"
)

// WithOption is an autogenerated mock type for the WithOption type
type WithOption struct {
	mock.Mock
}

// Execute provides a mock function with given fields: balances
func (_m *WithOption) Execute(balances state.StateContextI) (currency.Coin, error) {
	ret := _m.Called(balances)

	var r0 currency.Coin
	if rf, ok := ret.Get(0).(func(state.StateContextI) currency.Coin); ok {
		r0 = rf(balances)
	} else {
		r0 = ret.Get(0).(currency.Coin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(state.StateContextI) error); ok {
		r1 = rf(balances)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWithOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewWithOption creates a new instance of WithOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWithOption(t mockConstructorTestingTNewWithOption) *WithOption {
	mock := &WithOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
