// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	event "0chain.net/smartcontract/dbs/event"
	mock "github.com/stretchr/testify/mock"
)

// eventMergeMiddleware is an autogenerated mock type for the eventMergeMiddleware type
type eventMergeMiddleware struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *eventMergeMiddleware) Execute(_a0 []event.Event) ([]event.Event, error) {
	ret := _m.Called(_a0)

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func([]event.Event) []event.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]event.Event) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewEventMergeMiddleware interface {
	mock.TestingT
	Cleanup(func())
}

// newEventMergeMiddleware creates a new instance of eventMergeMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEventMergeMiddleware(t mockConstructorTestingTnewEventMergeMiddleware) *eventMergeMiddleware {
	mock := &eventMergeMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
