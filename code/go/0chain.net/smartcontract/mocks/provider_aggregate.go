// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	currency "github.com/0chain/common/core/currency"

	mock "github.com/stretchr/testify/mock"
)

// ProviderAggregate is an autogenerated mock type for the ProviderAggregate type
type ProviderAggregate struct {
	mock.Mock
}

// GetServiceCharge provides a mock function with given fields:
func (_m *ProviderAggregate) GetServiceCharge() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetTotalRewards provides a mock function with given fields:
func (_m *ProviderAggregate) GetTotalRewards() currency.Coin {
	ret := _m.Called()

	var r0 currency.Coin
	if rf, ok := ret.Get(0).(func() currency.Coin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(currency.Coin)
	}

	return r0
}

// GetTotalStake provides a mock function with given fields:
func (_m *ProviderAggregate) GetTotalStake() currency.Coin {
	ret := _m.Called()

	var r0 currency.Coin
	if rf, ok := ret.Get(0).(func() currency.Coin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(currency.Coin)
	}

	return r0
}

// GetUnstakeTotal provides a mock function with given fields:
func (_m *ProviderAggregate) GetUnstakeTotal() currency.Coin {
	ret := _m.Called()

	var r0 currency.Coin
	if rf, ok := ret.Get(0).(func() currency.Coin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(currency.Coin)
	}

	return r0
}

// SetServiceCharge provides a mock function with given fields: value
func (_m *ProviderAggregate) SetServiceCharge(value float64) {
	_m.Called(value)
}

// SetTotalRewards provides a mock function with given fields: value
func (_m *ProviderAggregate) SetTotalRewards(value currency.Coin) {
	_m.Called(value)
}

// SetTotalStake provides a mock function with given fields: value
func (_m *ProviderAggregate) SetTotalStake(value currency.Coin) {
	_m.Called(value)
}

// SetUnstakeTotal provides a mock function with given fields: value
func (_m *ProviderAggregate) SetUnstakeTotal(value currency.Coin) {
	_m.Called(value)
}

type mockConstructorTestingTNewProviderAggregate interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderAggregate creates a new instance of ProviderAggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderAggregate(t mockConstructorTestingTNewProviderAggregate) *ProviderAggregate {
	mock := &ProviderAggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
