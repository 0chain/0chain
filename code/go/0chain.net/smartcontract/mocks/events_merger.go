// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	event "0chain.net/smartcontract/dbs/event"
	mock "github.com/stretchr/testify/mock"
)

// eventsMerger is an autogenerated mock type for the eventsMerger type
type eventsMerger struct {
	mock.Mock
}

// filter provides a mock function with given fields: _a0
func (_m *eventsMerger) filter(_a0 event.Event) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(event.Event) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// merge provides a mock function with given fields: round, blockHash
func (_m *eventsMerger) merge(round int64, blockHash string) (*event.Event, error) {
	ret := _m.Called(round, blockHash)

	var r0 *event.Event
	if rf, ok := ret.Get(0).(func(int64, string) *event.Event); ok {
		r0 = rf(round, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(round, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewEventsMerger interface {
	mock.TestingT
	Cleanup(func())
}

// newEventsMerger creates a new instance of eventsMerger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEventsMerger(t mockConstructorTestingTnewEventsMerger) *eventsMerger {
	mock := &eventsMerger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
