// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	state "0chain.net/chaincore/chain/state"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	transaction "0chain.net/chaincore/transaction"
)

// BenchTestI is an autogenerated mock type for the BenchTestI type
type BenchTestI struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *BenchTestI) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: _a0, _a1
func (_m *BenchTestI) Run(_a0 state.TimedQueryStateContext, _a1 *testing.B) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(state.TimedQueryStateContext, *testing.B) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields:
func (_m *BenchTestI) Transaction() *transaction.Transaction {
	ret := _m.Called()

	var r0 *transaction.Transaction
	if rf, ok := ret.Get(0).(func() *transaction.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	return r0
}

type mockConstructorTestingTNewBenchTestI interface {
	mock.TestingT
	Cleanup(func())
}

// NewBenchTestI creates a new instance of BenchTestI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBenchTestI(t mockConstructorTestingTNewBenchTestI) *BenchTestI {
	mock := &BenchTestI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
