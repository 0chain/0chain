package interestpoolsc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"0chain.net/chaincore/tokenpool"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *interestPoolDecode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ZcnLockingPool"
	o = append(o, 0x83, 0xae, 0x5a, 0x63, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c)
	if z.ZcnLockingPool == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ZcnLockingPool.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ZcnLockingPool")
			return
		}
	}
	// string "APR"
	o = append(o, 0xa3, 0x41, 0x50, 0x52)
	o = msgp.AppendFloat64(o, z.APR)
	// string "TokensEarned"
	o = append(o, 0xac, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.TokensEarned)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *interestPoolDecode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ZcnLockingPool":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ZcnLockingPool = nil
			} else {
				if z.ZcnLockingPool == nil {
					z.ZcnLockingPool = new(tokenpool.ZcnLockingPool)
				}
				bts, err = z.ZcnLockingPool.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ZcnLockingPool")
					return
				}
			}
		case "APR":
			z.APR, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APR")
				return
			}
		case "TokensEarned":
			z.TokensEarned, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TokensEarned")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *interestPoolDecode) Msgsize() (s int) {
	s = 1 + 15
	if z.ZcnLockingPool == nil {
		s += msgp.NilSize
	} else {
		s += z.ZcnLockingPool.Msgsize()
	}
	s += 4 + msgp.Float64Size + 13 + msgp.Int64Size
	return
}
