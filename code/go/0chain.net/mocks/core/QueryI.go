// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	persistencestore "0chain.net/core/persistencestore"
	mock "github.com/stretchr/testify/mock"
)

// QueryI is an autogenerated mock type for the QueryI type
type QueryI struct {
	mock.Mock
}

// Bind provides a mock function with given fields: _a0
func (_m *QueryI) Bind(_a0 ...interface{}) persistencestore.QueryI {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 persistencestore.QueryI
	if rf, ok := ret.Get(0).(func(...interface{}) persistencestore.QueryI); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistencestore.QueryI)
		}
	}

	return r0
}

// Exec provides a mock function with given fields:
func (_m *QueryI) Exec() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Iter provides a mock function with given fields:
func (_m *QueryI) Iter() persistencestore.IteratorI {
	ret := _m.Called()

	var r0 persistencestore.IteratorI
	if rf, ok := ret.Get(0).(func() persistencestore.IteratorI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistencestore.IteratorI)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: _a0
func (_m *QueryI) Scan(_a0 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
