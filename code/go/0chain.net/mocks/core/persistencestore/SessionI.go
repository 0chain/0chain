// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	gocql "github.com/gocql/gocql"
	mock "github.com/stretchr/testify/mock"

	persistencestore "0chain.net/core/persistencestore"
)

// SessionI is an autogenerated mock type for the SessionI type
type SessionI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *SessionI) Close() {
	_m.Called()
}

// ExecuteBatch provides a mock function with given fields: _a0
func (_m *SessionI) ExecuteBatch(_a0 persistencestore.BatchI) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(persistencestore.BatchI) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBatch provides a mock function with given fields: _a0
func (_m *SessionI) NewBatch(_a0 gocql.BatchType) persistencestore.BatchI {
	ret := _m.Called(_a0)

	var r0 persistencestore.BatchI
	if rf, ok := ret.Get(0).(func(gocql.BatchType) persistencestore.BatchI); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistencestore.BatchI)
		}
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *SessionI) Query(_a0 string, _a1 ...interface{}) persistencestore.QueryI {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	var r0 persistencestore.QueryI
	if rf, ok := ret.Get(0).(func(string, ...interface{}) persistencestore.QueryI); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistencestore.QueryI)
		}
	}

	return r0
}
