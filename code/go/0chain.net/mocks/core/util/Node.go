// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	util "0chain.net/core/util"
	mock "github.com/stretchr/testify/mock"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// Clone provides a mock function with given fields:
func (_m *Node) Clone() util.Node {
	ret := _m.Called()

	var r0 util.Node
	if rf, ok := ret.Get(0).(func() util.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Node)
		}
	}

	return r0
}

// Decode provides a mock function with given fields: _a0
func (_m *Node) Decode(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encode provides a mock function with given fields:
func (_m *Node) Encode() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetHash provides a mock function with given fields:
func (_m *Node) GetHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHashBytes provides a mock function with given fields:
func (_m *Node) GetHashBytes() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetNodeType provides a mock function with given fields:
func (_m *Node) GetNodeType() byte {
	ret := _m.Called()

	var r0 byte
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	return r0
}

// GetOrigin provides a mock function with given fields:
func (_m *Node) GetOrigin() util.Sequence {
	ret := _m.Called()

	var r0 util.Sequence
	if rf, ok := ret.Get(0).(func() util.Sequence); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(util.Sequence)
	}

	return r0
}

// GetOriginTracker provides a mock function with given fields:
func (_m *Node) GetOriginTracker() util.OriginTrackerI {
	ret := _m.Called()

	var r0 util.OriginTrackerI
	if rf, ok := ret.Get(0).(func() util.OriginTrackerI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.OriginTrackerI)
		}
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *Node) GetVersion() util.Sequence {
	ret := _m.Called()

	var r0 util.Sequence
	if rf, ok := ret.Get(0).(func() util.Sequence); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(util.Sequence)
	}

	return r0
}

// Read provides a mock function with given fields: r
func (_m *Node) Read(r io.Reader) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOrigin provides a mock function with given fields: origin
func (_m *Node) SetOrigin(origin util.Sequence) {
	_m.Called(origin)
}

// SetOriginTracker provides a mock function with given fields: ot
func (_m *Node) SetOriginTracker(ot util.OriginTrackerI) {
	_m.Called(ot)
}

// SetVersion provides a mock function with given fields: version
func (_m *Node) SetVersion(version util.Sequence) {
	_m.Called(version)
}

// Write provides a mock function with given fields: w
func (_m *Node) Write(w io.Writer) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
