// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	util "0chain.net/core/util"
)

// MerklePatriciaTrieI is an autogenerated mock type for the MerklePatriciaTrieI type
type MerklePatriciaTrieI struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path
func (_m *MerklePatriciaTrieI) Delete(path util.Path) (util.Key, error) {
	ret := _m.Called(path)

	var r0 util.Key
	if rf, ok := ret.Get(0).(func(util.Path) util.Key); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Path) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeCollector provides a mock function with given fields:
func (_m *MerklePatriciaTrieI) GetChangeCollector() util.ChangeCollectorI {
	ret := _m.Called()

	var r0 util.ChangeCollectorI
	if rf, ok := ret.Get(0).(func() util.ChangeCollectorI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.ChangeCollectorI)
		}
	}

	return r0
}

// GetNodeDB provides a mock function with given fields:
func (_m *MerklePatriciaTrieI) GetNodeDB() util.NodeDB {
	ret := _m.Called()

	var r0 util.NodeDB
	if rf, ok := ret.Get(0).(func() util.NodeDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.NodeDB)
		}
	}

	return r0
}

// GetNodeValue provides a mock function with given fields: path
func (_m *MerklePatriciaTrieI) GetNodeValue(path util.Path) (util.Serializable, error) {
	ret := _m.Called(path)

	var r0 util.Serializable
	if rf, ok := ret.Get(0).(func(util.Path) util.Serializable); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Serializable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Path) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPathNodes provides a mock function with given fields: path
func (_m *MerklePatriciaTrieI) GetPathNodes(path util.Path) ([]util.Node, error) {
	ret := _m.Called(path)

	var r0 []util.Node
	if rf, ok := ret.Get(0).(func(util.Path) []util.Node); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]util.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Path) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoot provides a mock function with given fields:
func (_m *MerklePatriciaTrieI) GetRoot() util.Key {
	ret := _m.Called()

	var r0 util.Key
	if rf, ok := ret.Get(0).(func() util.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Key)
		}
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *MerklePatriciaTrieI) GetVersion() util.Sequence {
	ret := _m.Called()

	var r0 util.Sequence
	if rf, ok := ret.Get(0).(func() util.Sequence); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(util.Sequence)
	}

	return r0
}

// Insert provides a mock function with given fields: path, value
func (_m *MerklePatriciaTrieI) Insert(path util.Path, value util.Serializable) (util.Key, error) {
	ret := _m.Called(path, value)

	var r0 util.Key
	if rf, ok := ret.Get(0).(func(util.Path, util.Serializable) util.Key); ok {
		r0 = rf(path, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Path, util.Serializable) error); ok {
		r1 = rf(path, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Iterate provides a mock function with given fields: ctx, handler, visitNodeTypes
func (_m *MerklePatriciaTrieI) Iterate(ctx context.Context, handler util.MPTIteratorHandler, visitNodeTypes byte) error {
	ret := _m.Called(ctx, handler, visitNodeTypes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, util.MPTIteratorHandler, byte) error); ok {
		r0 = rf(ctx, handler, visitNodeTypes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IterateFrom provides a mock function with given fields: ctx, node, handler, visitNodeTypes
func (_m *MerklePatriciaTrieI) IterateFrom(ctx context.Context, node util.Key, handler util.MPTIteratorHandler, visitNodeTypes byte) error {
	ret := _m.Called(ctx, node, handler, visitNodeTypes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, util.Key, util.MPTIteratorHandler, byte) error); ok {
		r0 = rf(ctx, node, handler, visitNodeTypes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MergeDB provides a mock function with given fields: ndb, root
func (_m *MerklePatriciaTrieI) MergeDB(ndb util.NodeDB, root util.Key) error {
	ret := _m.Called(ndb, root)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.NodeDB, util.Key) error); ok {
		r0 = rf(ndb, root)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MergeMPTChanges provides a mock function with given fields: mpt2
func (_m *MerklePatriciaTrieI) MergeMPTChanges(mpt2 util.MerklePatriciaTrieI) error {
	ret := _m.Called(mpt2)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.MerklePatriciaTrieI) error); ok {
		r0 = rf(mpt2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrettyPrint provides a mock function with given fields: w
func (_m *MerklePatriciaTrieI) PrettyPrint(w io.Writer) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetChangeCollector provides a mock function with given fields: root
func (_m *MerklePatriciaTrieI) ResetChangeCollector(root util.Key) {
	_m.Called(root)
}

// SaveChanges provides a mock function with given fields: ndb, includeDeletes
func (_m *MerklePatriciaTrieI) SaveChanges(ndb util.NodeDB, includeDeletes bool) error {
	ret := _m.Called(ndb, includeDeletes)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.NodeDB, bool) error); ok {
		r0 = rf(ndb, includeDeletes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNodeDB provides a mock function with given fields: ndb
func (_m *MerklePatriciaTrieI) SetNodeDB(ndb util.NodeDB) {
	_m.Called(ndb)
}

// SetRoot provides a mock function with given fields: root
func (_m *MerklePatriciaTrieI) SetRoot(root util.Key) {
	_m.Called(root)
}

// SetVersion provides a mock function with given fields: version
func (_m *MerklePatriciaTrieI) SetVersion(version util.Sequence) {
	_m.Called(version)
}

// UpdateVersion provides a mock function with given fields: ctx, version, missingNodeHander
func (_m *MerklePatriciaTrieI) UpdateVersion(ctx context.Context, version util.Sequence, missingNodeHander util.MPTMissingNodeHandler) error {
	ret := _m.Called(ctx, version, missingNodeHander)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, util.Sequence, util.MPTMissingNodeHandler) error); ok {
		r0 = rf(ctx, version, missingNodeHander)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *MerklePatriciaTrieI) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
