// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "0chain.net/core/datastore"
	mock "github.com/stretchr/testify/mock"
)

// Entity is an autogenerated mock type for the Entity type
type Entity struct {
	mock.Mock
}

// ComputeProperties provides a mock function with given fields:
func (_m *Entity) ComputeProperties() {
	_m.Called()
}

// Delete provides a mock function with given fields: ctx
func (_m *Entity) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntityMetadata provides a mock function with given fields:
func (_m *Entity) GetEntityMetadata() datastore.EntityMetadata {
	ret := _m.Called()

	var r0 datastore.EntityMetadata
	if rf, ok := ret.Get(0).(func() datastore.EntityMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.EntityMetadata)
		}
	}

	return r0
}

// GetKey provides a mock function with given fields:
func (_m *Entity) GetKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetScore provides a mock function with given fields:
func (_m *Entity) GetScore() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, key
func (_m *Entity) Read(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKey provides a mock function with given fields: key
func (_m *Entity) SetKey(key string) {
	_m.Called(key)
}

// Validate provides a mock function with given fields: ctx
func (_m *Entity) Validate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: ctx
func (_m *Entity) Write(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
