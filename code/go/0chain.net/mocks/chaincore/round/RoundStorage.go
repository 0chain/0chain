// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RoundStorage is an autogenerated mock type for the RoundStorage type
type RoundStorage struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *RoundStorage) Count() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FindRoundIndex provides a mock function with given fields: _a0
func (_m *RoundStorage) FindRoundIndex(_a0 int64) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *RoundStorage) Get(_a0 int64) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int64) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetLatest provides a mock function with given fields:
func (_m *RoundStorage) GetLatest() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetRound provides a mock function with given fields: i
func (_m *RoundStorage) GetRound(i int) int64 {
	ret := _m.Called(i)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetRounds provides a mock function with given fields:
func (_m *RoundStorage) GetRounds() []int64 {
	ret := _m.Called()

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// Prune provides a mock function with given fields: _a0
func (_m *RoundStorage) Prune(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: entity, _a1
func (_m *RoundStorage) Put(entity interface{}, _a1 int64) error {
	ret := _m.Called(entity, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, int64) error); ok {
		r0 = rf(entity, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
