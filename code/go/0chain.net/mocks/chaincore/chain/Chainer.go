// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	block "0chain.net/chaincore/block"
	chain "0chain.net/chaincore/chain"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Chainer is an autogenerated mock type for the Chainer type
type Chainer struct {
	mock.Mock
}

// getFinalizedBlockFromSharders provides a mock function with given fields: ctx, ticket
func (_m *Chainer) getFinalizedBlockFromSharders(ctx context.Context, ticket *chain.LFBTicket) (*block.Block, error) {
	ret := _m.Called(ctx, ticket)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, *chain.LFBTicket) *block.Block); ok {
		r0 = rf(ctx, ticket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chain.LFBTicket) error); ok {
		r1 = rf(ctx, ticket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getNotarizedBlockFromMiners provides a mock function with given fields: ctx, hash
func (_m *Chainer) getNotarizedBlockFromMiners(ctx context.Context, hash string) (*block.Block, error) {
	ret := _m.Called(ctx, hash)

	var r0 *block.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) *block.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestLFBTicket provides a mock function with given fields: ctx
func (_m *Chainer) GetLatestLFBTicket(ctx context.Context) *chain.LFBTicket {
	ret := _m.Called(ctx)

	var r0 *chain.LFBTicket
	if rf, ok := ret.Get(0).(func(context.Context) *chain.LFBTicket); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.LFBTicket)
		}
	}

	return r0
}

// SubLFBTicket provides a mock function with given fields:
func (_m *Chainer) SubLFBTicket() chan *chain.LFBTicket {
	ret := _m.Called()

	var r0 chan *chain.LFBTicket
	if rf, ok := ret.Get(0).(func() chan *chain.LFBTicket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *chain.LFBTicket)
		}
	}

	return r0
}

// UnsubLFBTicket provides a mock function with given fields: sub
func (_m *Chainer) UnsubLFBTicket(sub chan *chain.LFBTicket) {
	_m.Called(sub)
}
