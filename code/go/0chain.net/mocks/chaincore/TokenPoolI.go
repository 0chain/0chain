// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	state "0chain.net/chaincore/state"
	mock "github.com/stretchr/testify/mock"

	tokenpool "0chain.net/chaincore/tokenpool"

	transaction "0chain.net/chaincore/transaction"
)

// TokenPoolI is an autogenerated mock type for the TokenPoolI type
type TokenPoolI struct {
	mock.Mock
}

// DigPool provides a mock function with given fields: id, txn
func (_m *TokenPoolI) DigPool(id string, txn *transaction.Transaction) (*state.Transfer, string, error) {
	ret := _m.Called(id, txn)

	var r0 *state.Transfer
	if rf, ok := ret.Get(0).(func(string, *transaction.Transaction) *state.Transfer); ok {
		r0 = rf(id, txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Transfer)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, *transaction.Transaction) string); ok {
		r1 = rf(id, txn)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *transaction.Transaction) error); ok {
		r2 = rf(id, txn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DrainPool provides a mock function with given fields: fromClientID, toClientID, value, entity
func (_m *TokenPoolI) DrainPool(fromClientID string, toClientID string, value state.Balance, entity interface{}) (*state.Transfer, string, error) {
	ret := _m.Called(fromClientID, toClientID, value, entity)

	var r0 *state.Transfer
	if rf, ok := ret.Get(0).(func(string, string, state.Balance, interface{}) *state.Transfer); ok {
		r0 = rf(fromClientID, toClientID, value, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Transfer)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, state.Balance, interface{}) string); ok {
		r1 = rf(fromClientID, toClientID, value, entity)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, state.Balance, interface{}) error); ok {
		r2 = rf(fromClientID, toClientID, value, entity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EmptyPool provides a mock function with given fields: fromClientID, toClientID, entity
func (_m *TokenPoolI) EmptyPool(fromClientID string, toClientID string, entity interface{}) (*state.Transfer, string, error) {
	ret := _m.Called(fromClientID, toClientID, entity)

	var r0 *state.Transfer
	if rf, ok := ret.Get(0).(func(string, string, interface{}) *state.Transfer); ok {
		r0 = rf(fromClientID, toClientID, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Transfer)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, interface{}) string); ok {
		r1 = rf(fromClientID, toClientID, entity)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, interface{}) error); ok {
		r2 = rf(fromClientID, toClientID, entity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FillPool provides a mock function with given fields: txn
func (_m *TokenPoolI) FillPool(txn *transaction.Transaction) (*state.Transfer, string, error) {
	ret := _m.Called(txn)

	var r0 *state.Transfer
	if rf, ok := ret.Get(0).(func(*transaction.Transaction) *state.Transfer); ok {
		r0 = rf(txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Transfer)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*transaction.Transaction) string); ok {
		r1 = rf(txn)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*transaction.Transaction) error); ok {
		r2 = rf(txn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBalance provides a mock function with given fields:
func (_m *TokenPoolI) GetBalance() state.Balance {
	ret := _m.Called()

	var r0 state.Balance
	if rf, ok := ret.Get(0).(func() state.Balance); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.Balance)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *TokenPoolI) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetBalance provides a mock function with given fields: value
func (_m *TokenPoolI) SetBalance(value state.Balance) {
	_m.Called(value)
}

// TransferTo provides a mock function with given fields: op, value, entity
func (_m *TokenPoolI) TransferTo(op tokenpool.TokenPoolI, value state.Balance, entity interface{}) (*state.Transfer, string, error) {
	ret := _m.Called(op, value, entity)

	var r0 *state.Transfer
	if rf, ok := ret.Get(0).(func(tokenpool.TokenPoolI, state.Balance, interface{}) *state.Transfer); ok {
		r0 = rf(op, value, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Transfer)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(tokenpool.TokenPoolI, state.Balance, interface{}) string); ok {
		r1 = rf(op, value, entity)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(tokenpool.TokenPoolI, state.Balance, interface{}) error); ok {
		r2 = rf(op, value, entity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
