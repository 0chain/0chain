// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	blockdb "0chain.net/sharder/blockdb"

	mock "github.com/stretchr/testify/mock"
)

// Index is an autogenerated mock type for the Index type
type Index struct {
	mock.Mock
}

// Decode provides a mock function with given fields: reader
func (_m *Index) Decode(reader io.Reader) error {
	ret := _m.Called(reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encode provides a mock function with given fields: writer
func (_m *Index) Encode(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeys provides a mock function with given fields:
func (_m *Index) GetKeys() []blockdb.Key {
	ret := _m.Called()

	var r0 []blockdb.Key
	if rf, ok := ret.Get(0).(func() []blockdb.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blockdb.Key)
		}
	}

	return r0
}

// GetOffset provides a mock function with given fields: key
func (_m *Index) GetOffset(key blockdb.Key) (int64, error) {
	ret := _m.Called(key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(blockdb.Key) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(blockdb.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOffset provides a mock function with given fields: key, offset
func (_m *Index) SetOffset(key blockdb.Key, offset int64) error {
	ret := _m.Called(key, offset)

	var r0 error
	if rf, ok := ret.Get(0).(func(blockdb.Key, int64) error); ok {
		r0 = rf(key, offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
