// Code generated by mockery v2.6.0. DO NOT EDIT.

package persistencestore

import (
	context "context"

	gocql "github.com/gocql/gocql"

	mock "github.com/stretchr/testify/mock"
)

// BatchI is an autogenerated mock type for the BatchI type
type BatchI struct {
	mock.Mock
}

// AddAttempts provides a mock function with given fields: i, host
func (_m *BatchI) AddAttempts(i int, host *gocql.HostInfo) {
	_m.Called(i, host)
}

// AddLatency provides a mock function with given fields: l, host
func (_m *BatchI) AddLatency(l int64, host *gocql.HostInfo) {
	_m.Called(l, host)
}

// Attempts provides a mock function with given fields:
func (_m *BatchI) Attempts() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Bind provides a mock function with given fields: stmt, bind
func (_m *BatchI) Bind(stmt string, bind func(*gocql.QueryInfo) ([]interface{}, error)) {
	_m.Called(stmt, bind)
}

// Cancel provides a mock function with given fields:
func (_m *BatchI) Cancel() {
	_m.Called()
}

// Context provides a mock function with given fields:
func (_m *BatchI) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// DefaultTimestamp provides a mock function with given fields: enable
func (_m *BatchI) DefaultTimestamp(enable bool) *gocql.Batch {
	ret := _m.Called(enable)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(bool) *gocql.Batch); ok {
		r0 = rf(enable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// GetConsistency provides a mock function with given fields:
func (_m *BatchI) GetConsistency() gocql.Consistency {
	ret := _m.Called()

	var r0 gocql.Consistency
	if rf, ok := ret.Get(0).(func() gocql.Consistency); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gocql.Consistency)
	}

	return r0
}

// GetRoutingKey provides a mock function with given fields:
func (_m *BatchI) GetRoutingKey() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsIdempotent provides a mock function with given fields:
func (_m *BatchI) IsIdempotent() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Keyspace provides a mock function with given fields:
func (_m *BatchI) Keyspace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Latency provides a mock function with given fields:
func (_m *BatchI) Latency() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Observer provides a mock function with given fields: observer
func (_m *BatchI) Observer(observer gocql.BatchObserver) *gocql.Batch {
	ret := _m.Called(observer)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(gocql.BatchObserver) *gocql.Batch); ok {
		r0 = rf(observer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// Query provides a mock function with given fields: stmt, args
func (_m *BatchI) Query(stmt string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, stmt)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// RetryPolicy provides a mock function with given fields: r
func (_m *BatchI) RetryPolicy(r gocql.RetryPolicy) *gocql.Batch {
	ret := _m.Called(r)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(gocql.RetryPolicy) *gocql.Batch); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// SerialConsistency provides a mock function with given fields: cons
func (_m *BatchI) SerialConsistency(cons gocql.SerialConsistency) *gocql.Batch {
	ret := _m.Called(cons)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(gocql.SerialConsistency) *gocql.Batch); ok {
		r0 = rf(cons)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// SetConsistency provides a mock function with given fields: c
func (_m *BatchI) SetConsistency(c gocql.Consistency) {
	_m.Called(c)
}

// Size provides a mock function with given fields:
func (_m *BatchI) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SpeculativeExecutionPolicy provides a mock function with given fields: sp
func (_m *BatchI) SpeculativeExecutionPolicy(sp gocql.SpeculativeExecutionPolicy) *gocql.Batch {
	ret := _m.Called(sp)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(gocql.SpeculativeExecutionPolicy) *gocql.Batch); ok {
		r0 = rf(sp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *BatchI) WithContext(ctx context.Context) *gocql.Batch {
	ret := _m.Called(ctx)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(context.Context) *gocql.Batch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}

// WithTimestamp provides a mock function with given fields: timestamp
func (_m *BatchI) WithTimestamp(timestamp int64) *gocql.Batch {
	ret := _m.Called(timestamp)

	var r0 *gocql.Batch
	if rf, ok := ret.Get(0).(func(int64) *gocql.Batch); ok {
		r0 = rf(timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.Batch)
		}
	}

	return r0
}
