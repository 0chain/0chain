// Code generated by mockery v2.6.0. DO NOT EDIT.

package persistencestore

import (
	gocql "github.com/gocql/gocql"
	mock "github.com/stretchr/testify/mock"
)

// IteratorI is an autogenerated mock type for the IteratorI type
type IteratorI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IteratorI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Columns provides a mock function with given fields:
func (_m *IteratorI) Columns() []gocql.ColumnInfo {
	ret := _m.Called()

	var r0 []gocql.ColumnInfo
	if rf, ok := ret.Get(0).(func() []gocql.ColumnInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gocql.ColumnInfo)
		}
	}

	return r0
}

// GetCustomPayload provides a mock function with given fields:
func (_m *IteratorI) GetCustomPayload() map[string][]byte {
	ret := _m.Called()

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	return r0
}

// Host provides a mock function with given fields:
func (_m *IteratorI) Host() *gocql.HostInfo {
	ret := _m.Called()

	var r0 *gocql.HostInfo
	if rf, ok := ret.Get(0).(func() *gocql.HostInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocql.HostInfo)
		}
	}

	return r0
}

// MapScan provides a mock function with given fields: m
func (_m *IteratorI) MapScan(m map[string]interface{}) bool {
	ret := _m.Called(m)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NumRows provides a mock function with given fields:
func (_m *IteratorI) NumRows() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PageState provides a mock function with given fields:
func (_m *IteratorI) PageState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RowData provides a mock function with given fields:
func (_m *IteratorI) RowData() (gocql.RowData, error) {
	ret := _m.Called()

	var r0 gocql.RowData
	if rf, ok := ret.Get(0).(func() gocql.RowData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gocql.RowData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scan provides a mock function with given fields: dest
func (_m *IteratorI) Scan(dest ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Scanner provides a mock function with given fields:
func (_m *IteratorI) Scanner() gocql.Scanner {
	ret := _m.Called()

	var r0 gocql.Scanner
	if rf, ok := ret.Get(0).(func() gocql.Scanner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gocql.Scanner)
		}
	}

	return r0
}

// SliceMap provides a mock function with given fields:
func (_m *IteratorI) SliceMap() ([]map[string]interface{}, error) {
	ret := _m.Called()

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Warnings provides a mock function with given fields:
func (_m *IteratorI) Warnings() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// WillSwitchPage provides a mock function with given fields:
func (_m *IteratorI) WillSwitchPage() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
