package rest

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"0chain.net/smartcontract/storagesc"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z readMarkersCount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ReadMarkersCount"
	o = append(o, 0x81, 0xb0, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ReadMarkersCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *readMarkersCount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ReadMarkersCount":
			z.ReadMarkersCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadMarkersCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z readMarkersCount) Msgsize() (s int) {
	s = 1 + 17 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *stakePoolStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "ID"
	o = append(o, 0x8c, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "Balance"
	o = append(o, 0xa7, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = z.Balance.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	// string "Unstake"
	o = append(o, 0xa7, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65)
	o, err = z.Unstake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Unstake")
		return
	}
	// string "Free"
	o = append(o, 0xa4, 0x46, 0x72, 0x65, 0x65)
	o = msgp.AppendInt64(o, z.Free)
	// string "Capacity"
	o = append(o, 0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendInt64(o, z.Capacity)
	// string "WritePrice"
	o = append(o, 0xaa, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65)
	o, err = z.WritePrice.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "WritePrice")
		return
	}
	// string "OffersTotal"
	o = append(o, 0xab, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o, err = z.OffersTotal.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "OffersTotal")
		return
	}
	// string "UnstakeTotal"
	o = append(o, 0xac, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c)
	o, err = z.UnstakeTotal.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "UnstakeTotal")
		return
	}
	// string "Delegate"
	o = append(o, 0xa8, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Delegate)))
	for za0001 := range z.Delegate {
		o, err = z.Delegate[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Delegate", za0001)
			return
		}
	}
	// string "Penalty"
	o = append(o, 0xa7, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79)
	o, err = z.Penalty.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Penalty")
		return
	}
	// string "Rewards"
	o = append(o, 0xa7, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	o, err = z.Rewards.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Rewards")
		return
	}
	// string "Settings"
	o = append(o, 0xa8, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73)
	o, err = z.Settings.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Settings")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stakePoolStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Balance":
			bts, err = z.Balance.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		case "Unstake":
			bts, err = z.Unstake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unstake")
				return
			}
		case "Free":
			z.Free, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Free")
				return
			}
		case "Capacity":
			z.Capacity, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "WritePrice":
			bts, err = z.WritePrice.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "WritePrice")
				return
			}
		case "OffersTotal":
			bts, err = z.OffersTotal.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffersTotal")
				return
			}
		case "UnstakeTotal":
			bts, err = z.UnstakeTotal.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnstakeTotal")
				return
			}
		case "Delegate":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Delegate")
				return
			}
			if cap(z.Delegate) >= int(zb0002) {
				z.Delegate = (z.Delegate)[:zb0002]
			} else {
				z.Delegate = make([]storagesc.DelegatePoolStat, zb0002)
			}
			for za0001 := range z.Delegate {
				bts, err = z.Delegate[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Delegate", za0001)
					return
				}
			}
		case "Penalty":
			bts, err = z.Penalty.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Penalty")
				return
			}
		case "Rewards":
			bts, err = z.Rewards.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rewards")
				return
			}
		case "Settings":
			bts, err = z.Settings.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Settings")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *stakePoolStat) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 8 + z.Balance.Msgsize() + 8 + z.Unstake.Msgsize() + 5 + msgp.Int64Size + 9 + msgp.Int64Size + 11 + z.WritePrice.Msgsize() + 12 + z.OffersTotal.Msgsize() + 13 + z.UnstakeTotal.Msgsize() + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Delegate {
		s += z.Delegate[za0001].Msgsize()
	}
	s += 8 + z.Penalty.Msgsize() + 8 + z.Rewards.Msgsize() + 9 + z.Settings.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *storageNodeResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "StorageNode"
	o = append(o, 0x82, 0xab, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65)
	o, err = z.StorageNode.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "StorageNode")
		return
	}
	// string "TotalStake"
	o = append(o, 0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o = msgp.AppendInt64(o, z.TotalStake)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *storageNodeResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StorageNode":
			bts, err = z.StorageNode.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "StorageNode")
				return
			}
		case "TotalStake":
			z.TotalStake, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalStake")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *storageNodeResponse) Msgsize() (s int) {
	s = 1 + 12 + z.StorageNode.Msgsize() + 11 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *storageNodesResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Nodes"
	o = append(o, 0x81, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nodes)))
	for za0001 := range z.Nodes {
		// map header, size 2
		// string "StorageNode"
		o = append(o, 0x82, 0xab, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65)
		o, err = z.Nodes[za0001].StorageNode.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001, "StorageNode")
			return
		}
		// string "TotalStake"
		o = append(o, 0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65)
		o = msgp.AppendInt64(o, z.Nodes[za0001].TotalStake)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *storageNodesResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Nodes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]storageNodeResponse, zb0002)
			}
			for za0001 := range z.Nodes {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Nodes", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "StorageNode":
						bts, err = z.Nodes[za0001].StorageNode.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0001, "StorageNode")
							return
						}
					case "TotalStake":
						z.Nodes[za0001].TotalStake, bts, err = msgp.ReadInt64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0001, "TotalStake")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *storageNodesResponse) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Nodes {
		s += 1 + 12 + z.Nodes[za0001].StorageNode.Msgsize() + 11 + msgp.Int64Size
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *storageStakePool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "StakePool"
	o = append(o, 0x83, 0xa9, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x6f, 0x6c)
	o, err = z.StakePool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "StakePool")
		return
	}
	// string "TotalOffers"
	o = append(o, 0xab, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73)
	o, err = z.TotalOffers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalOffers")
		return
	}
	// string "TotalUnStake"
	o = append(o, 0xac, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65)
	o, err = z.TotalUnStake.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TotalUnStake")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *storageStakePool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StakePool":
			bts, err = z.StakePool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "StakePool")
				return
			}
		case "TotalOffers":
			bts, err = z.TotalOffers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalOffers")
				return
			}
		case "TotalUnStake":
			bts, err = z.TotalUnStake.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalUnStake")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *storageStakePool) Msgsize() (s int) {
	s = 1 + 10 + z.StakePool.Msgsize() + 12 + z.TotalOffers.Msgsize() + 13 + z.TotalUnStake.Msgsize()
	return
}
